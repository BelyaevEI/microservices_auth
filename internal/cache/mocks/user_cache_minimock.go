// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/BelyaevEI/microservices_auth/internal/cache.UserCache -o user_cache_minimock.go -n UserCacheMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/BelyaevEI/microservices_auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// UserCacheMock implements cache.UserCache
type UserCacheMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateUser          func(ctx context.Context, user *model.User) (err error)
	inspectFuncCreateUser   func(ctx context.Context, user *model.User)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mUserCacheMockCreateUser

	funcDeleteUserByID          func(ctx context.Context, id int64) (err error)
	inspectFuncDeleteUserByID   func(ctx context.Context, id int64)
	afterDeleteUserByIDCounter  uint64
	beforeDeleteUserByIDCounter uint64
	DeleteUserByIDMock          mUserCacheMockDeleteUserByID

	funcGetUserByID          func(ctx context.Context, id int64) (up1 *model.User, err error)
	inspectFuncGetUserByID   func(ctx context.Context, id int64)
	afterGetUserByIDCounter  uint64
	beforeGetUserByIDCounter uint64
	GetUserByIDMock          mUserCacheMockGetUserByID
}

// NewUserCacheMock returns a mock for cache.UserCache
func NewUserCacheMock(t minimock.Tester) *UserCacheMock {
	m := &UserCacheMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateUserMock = mUserCacheMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*UserCacheMockCreateUserParams{}

	m.DeleteUserByIDMock = mUserCacheMockDeleteUserByID{mock: m}
	m.DeleteUserByIDMock.callArgs = []*UserCacheMockDeleteUserByIDParams{}

	m.GetUserByIDMock = mUserCacheMockGetUserByID{mock: m}
	m.GetUserByIDMock.callArgs = []*UserCacheMockGetUserByIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserCacheMockCreateUser struct {
	optional           bool
	mock               *UserCacheMock
	defaultExpectation *UserCacheMockCreateUserExpectation
	expectations       []*UserCacheMockCreateUserExpectation

	callArgs []*UserCacheMockCreateUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserCacheMockCreateUserExpectation specifies expectation struct of the UserCache.CreateUser
type UserCacheMockCreateUserExpectation struct {
	mock      *UserCacheMock
	params    *UserCacheMockCreateUserParams
	paramPtrs *UserCacheMockCreateUserParamPtrs
	results   *UserCacheMockCreateUserResults
	Counter   uint64
}

// UserCacheMockCreateUserParams contains parameters of the UserCache.CreateUser
type UserCacheMockCreateUserParams struct {
	ctx  context.Context
	user *model.User
}

// UserCacheMockCreateUserParamPtrs contains pointers to parameters of the UserCache.CreateUser
type UserCacheMockCreateUserParamPtrs struct {
	ctx  *context.Context
	user **model.User
}

// UserCacheMockCreateUserResults contains results of the UserCache.CreateUser
type UserCacheMockCreateUserResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateUser *mUserCacheMockCreateUser) Optional() *mUserCacheMockCreateUser {
	mmCreateUser.optional = true
	return mmCreateUser
}

// Expect sets up expected params for UserCache.CreateUser
func (mmCreateUser *mUserCacheMockCreateUser) Expect(ctx context.Context, user *model.User) *mUserCacheMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserCacheMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserCacheMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.paramPtrs != nil {
		mmCreateUser.mock.t.Fatalf("UserCacheMock.CreateUser mock is already set by ExpectParams functions")
	}

	mmCreateUser.defaultExpectation.params = &UserCacheMockCreateUserParams{ctx, user}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// ExpectCtxParam1 sets up expected param ctx for UserCache.CreateUser
func (mmCreateUser *mUserCacheMockCreateUser) ExpectCtxParam1(ctx context.Context) *mUserCacheMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserCacheMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserCacheMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserCacheMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserCacheMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateUser
}

// ExpectUserParam2 sets up expected param user for UserCache.CreateUser
func (mmCreateUser *mUserCacheMockCreateUser) ExpectUserParam2(user *model.User) *mUserCacheMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserCacheMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserCacheMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserCacheMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserCacheMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.user = &user

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the UserCache.CreateUser
func (mmCreateUser *mUserCacheMockCreateUser) Inspect(f func(ctx context.Context, user *model.User)) *mUserCacheMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for UserCacheMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by UserCache.CreateUser
func (mmCreateUser *mUserCacheMockCreateUser) Return(err error) *UserCacheMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserCacheMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserCacheMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &UserCacheMockCreateUserResults{err}
	return mmCreateUser.mock
}

// Set uses given function f to mock the UserCache.CreateUser method
func (mmCreateUser *mUserCacheMockCreateUser) Set(f func(ctx context.Context, user *model.User) (err error)) *UserCacheMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the UserCache.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the UserCache.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the UserCache.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mUserCacheMockCreateUser) When(ctx context.Context, user *model.User) *UserCacheMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserCacheMock.CreateUser mock is already set by Set")
	}

	expectation := &UserCacheMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &UserCacheMockCreateUserParams{ctx, user},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up UserCache.CreateUser return parameters for the expectation previously defined by the When method
func (e *UserCacheMockCreateUserExpectation) Then(err error) *UserCacheMock {
	e.results = &UserCacheMockCreateUserResults{err}
	return e.mock
}

// Times sets number of times UserCache.CreateUser should be invoked
func (mmCreateUser *mUserCacheMockCreateUser) Times(n uint64) *mUserCacheMockCreateUser {
	if n == 0 {
		mmCreateUser.mock.t.Fatalf("Times of UserCacheMock.CreateUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateUser.expectedInvocations, n)
	return mmCreateUser
}

func (mmCreateUser *mUserCacheMockCreateUser) invocationsDone() bool {
	if len(mmCreateUser.expectations) == 0 && mmCreateUser.defaultExpectation == nil && mmCreateUser.mock.funcCreateUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateUser.mock.afterCreateUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateUser implements cache.UserCache
func (mmCreateUser *UserCacheMock) CreateUser(ctx context.Context, user *model.User) (err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, user)
	}

	mm_params := UserCacheMockCreateUserParams{ctx, user}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, &mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_want_ptrs := mmCreateUser.CreateUserMock.defaultExpectation.paramPtrs

		mm_got := UserCacheMockCreateUserParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateUser.t.Errorf("UserCacheMock.CreateUser got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmCreateUser.t.Errorf("UserCacheMock.CreateUser got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("UserCacheMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the UserCacheMock.CreateUser")
		}
		return (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, user)
	}
	mmCreateUser.t.Fatalf("Unexpected call to UserCacheMock.CreateUser. %v %v", ctx, user)
	return
}

// CreateUserAfterCounter returns a count of finished UserCacheMock.CreateUser invocations
func (mmCreateUser *UserCacheMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of UserCacheMock.CreateUser invocations
func (mmCreateUser *UserCacheMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to UserCacheMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mUserCacheMockCreateUser) Calls() []*UserCacheMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*UserCacheMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *UserCacheMock) MinimockCreateUserDone() bool {
	if m.CreateUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateUserMock.invocationsDone()
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *UserCacheMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheMock.CreateUser with params: %#v", *e.params)
		}
	}

	afterCreateUserCounter := mm_atomic.LoadUint64(&m.afterCreateUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && afterCreateUserCounter < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCacheMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to UserCacheMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && afterCreateUserCounter < 1 {
		m.t.Error("Expected call to UserCacheMock.CreateUser")
	}

	if !m.CreateUserMock.invocationsDone() && afterCreateUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheMock.CreateUser but found %d calls",
			mm_atomic.LoadUint64(&m.CreateUserMock.expectedInvocations), afterCreateUserCounter)
	}
}

type mUserCacheMockDeleteUserByID struct {
	optional           bool
	mock               *UserCacheMock
	defaultExpectation *UserCacheMockDeleteUserByIDExpectation
	expectations       []*UserCacheMockDeleteUserByIDExpectation

	callArgs []*UserCacheMockDeleteUserByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserCacheMockDeleteUserByIDExpectation specifies expectation struct of the UserCache.DeleteUserByID
type UserCacheMockDeleteUserByIDExpectation struct {
	mock      *UserCacheMock
	params    *UserCacheMockDeleteUserByIDParams
	paramPtrs *UserCacheMockDeleteUserByIDParamPtrs
	results   *UserCacheMockDeleteUserByIDResults
	Counter   uint64
}

// UserCacheMockDeleteUserByIDParams contains parameters of the UserCache.DeleteUserByID
type UserCacheMockDeleteUserByIDParams struct {
	ctx context.Context
	id  int64
}

// UserCacheMockDeleteUserByIDParamPtrs contains pointers to parameters of the UserCache.DeleteUserByID
type UserCacheMockDeleteUserByIDParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// UserCacheMockDeleteUserByIDResults contains results of the UserCache.DeleteUserByID
type UserCacheMockDeleteUserByIDResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) Optional() *mUserCacheMockDeleteUserByID {
	mmDeleteUserByID.optional = true
	return mmDeleteUserByID
}

// Expect sets up expected params for UserCache.DeleteUserByID
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) Expect(ctx context.Context, id int64) *mUserCacheMockDeleteUserByID {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserCacheMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserCacheMockDeleteUserByIDExpectation{}
	}

	if mmDeleteUserByID.defaultExpectation.paramPtrs != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserCacheMock.DeleteUserByID mock is already set by ExpectParams functions")
	}

	mmDeleteUserByID.defaultExpectation.params = &UserCacheMockDeleteUserByIDParams{ctx, id}
	for _, e := range mmDeleteUserByID.expectations {
		if minimock.Equal(e.params, mmDeleteUserByID.defaultExpectation.params) {
			mmDeleteUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteUserByID.defaultExpectation.params)
		}
	}

	return mmDeleteUserByID
}

// ExpectCtxParam1 sets up expected param ctx for UserCache.DeleteUserByID
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) ExpectCtxParam1(ctx context.Context) *mUserCacheMockDeleteUserByID {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserCacheMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserCacheMockDeleteUserByIDExpectation{}
	}

	if mmDeleteUserByID.defaultExpectation.params != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserCacheMock.DeleteUserByID mock is already set by Expect")
	}

	if mmDeleteUserByID.defaultExpectation.paramPtrs == nil {
		mmDeleteUserByID.defaultExpectation.paramPtrs = &UserCacheMockDeleteUserByIDParamPtrs{}
	}
	mmDeleteUserByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteUserByID
}

// ExpectIdParam2 sets up expected param id for UserCache.DeleteUserByID
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) ExpectIdParam2(id int64) *mUserCacheMockDeleteUserByID {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserCacheMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserCacheMockDeleteUserByIDExpectation{}
	}

	if mmDeleteUserByID.defaultExpectation.params != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserCacheMock.DeleteUserByID mock is already set by Expect")
	}

	if mmDeleteUserByID.defaultExpectation.paramPtrs == nil {
		mmDeleteUserByID.defaultExpectation.paramPtrs = &UserCacheMockDeleteUserByIDParamPtrs{}
	}
	mmDeleteUserByID.defaultExpectation.paramPtrs.id = &id

	return mmDeleteUserByID
}

// Inspect accepts an inspector function that has same arguments as the UserCache.DeleteUserByID
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) Inspect(f func(ctx context.Context, id int64)) *mUserCacheMockDeleteUserByID {
	if mmDeleteUserByID.mock.inspectFuncDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("Inspect function is already set for UserCacheMock.DeleteUserByID")
	}

	mmDeleteUserByID.mock.inspectFuncDeleteUserByID = f

	return mmDeleteUserByID
}

// Return sets up results that will be returned by UserCache.DeleteUserByID
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) Return(err error) *UserCacheMock {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserCacheMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserCacheMockDeleteUserByIDExpectation{mock: mmDeleteUserByID.mock}
	}
	mmDeleteUserByID.defaultExpectation.results = &UserCacheMockDeleteUserByIDResults{err}
	return mmDeleteUserByID.mock
}

// Set uses given function f to mock the UserCache.DeleteUserByID method
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) Set(f func(ctx context.Context, id int64) (err error)) *UserCacheMock {
	if mmDeleteUserByID.defaultExpectation != nil {
		mmDeleteUserByID.mock.t.Fatalf("Default expectation is already set for the UserCache.DeleteUserByID method")
	}

	if len(mmDeleteUserByID.expectations) > 0 {
		mmDeleteUserByID.mock.t.Fatalf("Some expectations are already set for the UserCache.DeleteUserByID method")
	}

	mmDeleteUserByID.mock.funcDeleteUserByID = f
	return mmDeleteUserByID.mock
}

// When sets expectation for the UserCache.DeleteUserByID which will trigger the result defined by the following
// Then helper
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) When(ctx context.Context, id int64) *UserCacheMockDeleteUserByIDExpectation {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserCacheMock.DeleteUserByID mock is already set by Set")
	}

	expectation := &UserCacheMockDeleteUserByIDExpectation{
		mock:   mmDeleteUserByID.mock,
		params: &UserCacheMockDeleteUserByIDParams{ctx, id},
	}
	mmDeleteUserByID.expectations = append(mmDeleteUserByID.expectations, expectation)
	return expectation
}

// Then sets up UserCache.DeleteUserByID return parameters for the expectation previously defined by the When method
func (e *UserCacheMockDeleteUserByIDExpectation) Then(err error) *UserCacheMock {
	e.results = &UserCacheMockDeleteUserByIDResults{err}
	return e.mock
}

// Times sets number of times UserCache.DeleteUserByID should be invoked
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) Times(n uint64) *mUserCacheMockDeleteUserByID {
	if n == 0 {
		mmDeleteUserByID.mock.t.Fatalf("Times of UserCacheMock.DeleteUserByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteUserByID.expectedInvocations, n)
	return mmDeleteUserByID
}

func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) invocationsDone() bool {
	if len(mmDeleteUserByID.expectations) == 0 && mmDeleteUserByID.defaultExpectation == nil && mmDeleteUserByID.mock.funcDeleteUserByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteUserByID.mock.afterDeleteUserByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteUserByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteUserByID implements cache.UserCache
func (mmDeleteUserByID *UserCacheMock) DeleteUserByID(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteUserByID.beforeDeleteUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteUserByID.afterDeleteUserByIDCounter, 1)

	if mmDeleteUserByID.inspectFuncDeleteUserByID != nil {
		mmDeleteUserByID.inspectFuncDeleteUserByID(ctx, id)
	}

	mm_params := UserCacheMockDeleteUserByIDParams{ctx, id}

	// Record call args
	mmDeleteUserByID.DeleteUserByIDMock.mutex.Lock()
	mmDeleteUserByID.DeleteUserByIDMock.callArgs = append(mmDeleteUserByID.DeleteUserByIDMock.callArgs, &mm_params)
	mmDeleteUserByID.DeleteUserByIDMock.mutex.Unlock()

	for _, e := range mmDeleteUserByID.DeleteUserByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.paramPtrs

		mm_got := UserCacheMockDeleteUserByIDParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteUserByID.t.Errorf("UserCacheMock.DeleteUserByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDeleteUserByID.t.Errorf("UserCacheMock.DeleteUserByID got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteUserByID.t.Errorf("UserCacheMock.DeleteUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteUserByID.t.Fatal("No results are set for the UserCacheMock.DeleteUserByID")
		}
		return (*mm_results).err
	}
	if mmDeleteUserByID.funcDeleteUserByID != nil {
		return mmDeleteUserByID.funcDeleteUserByID(ctx, id)
	}
	mmDeleteUserByID.t.Fatalf("Unexpected call to UserCacheMock.DeleteUserByID. %v %v", ctx, id)
	return
}

// DeleteUserByIDAfterCounter returns a count of finished UserCacheMock.DeleteUserByID invocations
func (mmDeleteUserByID *UserCacheMock) DeleteUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUserByID.afterDeleteUserByIDCounter)
}

// DeleteUserByIDBeforeCounter returns a count of UserCacheMock.DeleteUserByID invocations
func (mmDeleteUserByID *UserCacheMock) DeleteUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUserByID.beforeDeleteUserByIDCounter)
}

// Calls returns a list of arguments used in each call to UserCacheMock.DeleteUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteUserByID *mUserCacheMockDeleteUserByID) Calls() []*UserCacheMockDeleteUserByIDParams {
	mmDeleteUserByID.mutex.RLock()

	argCopy := make([]*UserCacheMockDeleteUserByIDParams, len(mmDeleteUserByID.callArgs))
	copy(argCopy, mmDeleteUserByID.callArgs)

	mmDeleteUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteUserByIDDone returns true if the count of the DeleteUserByID invocations corresponds
// the number of defined expectations
func (m *UserCacheMock) MinimockDeleteUserByIDDone() bool {
	if m.DeleteUserByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteUserByIDMock.invocationsDone()
}

// MinimockDeleteUserByIDInspect logs each unmet expectation
func (m *UserCacheMock) MinimockDeleteUserByIDInspect() {
	for _, e := range m.DeleteUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheMock.DeleteUserByID with params: %#v", *e.params)
		}
	}

	afterDeleteUserByIDCounter := mm_atomic.LoadUint64(&m.afterDeleteUserByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteUserByIDMock.defaultExpectation != nil && afterDeleteUserByIDCounter < 1 {
		if m.DeleteUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCacheMock.DeleteUserByID")
		} else {
			m.t.Errorf("Expected call to UserCacheMock.DeleteUserByID with params: %#v", *m.DeleteUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteUserByID != nil && afterDeleteUserByIDCounter < 1 {
		m.t.Error("Expected call to UserCacheMock.DeleteUserByID")
	}

	if !m.DeleteUserByIDMock.invocationsDone() && afterDeleteUserByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheMock.DeleteUserByID but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteUserByIDMock.expectedInvocations), afterDeleteUserByIDCounter)
	}
}

type mUserCacheMockGetUserByID struct {
	optional           bool
	mock               *UserCacheMock
	defaultExpectation *UserCacheMockGetUserByIDExpectation
	expectations       []*UserCacheMockGetUserByIDExpectation

	callArgs []*UserCacheMockGetUserByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserCacheMockGetUserByIDExpectation specifies expectation struct of the UserCache.GetUserByID
type UserCacheMockGetUserByIDExpectation struct {
	mock      *UserCacheMock
	params    *UserCacheMockGetUserByIDParams
	paramPtrs *UserCacheMockGetUserByIDParamPtrs
	results   *UserCacheMockGetUserByIDResults
	Counter   uint64
}

// UserCacheMockGetUserByIDParams contains parameters of the UserCache.GetUserByID
type UserCacheMockGetUserByIDParams struct {
	ctx context.Context
	id  int64
}

// UserCacheMockGetUserByIDParamPtrs contains pointers to parameters of the UserCache.GetUserByID
type UserCacheMockGetUserByIDParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// UserCacheMockGetUserByIDResults contains results of the UserCache.GetUserByID
type UserCacheMockGetUserByIDResults struct {
	up1 *model.User
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUserByID *mUserCacheMockGetUserByID) Optional() *mUserCacheMockGetUserByID {
	mmGetUserByID.optional = true
	return mmGetUserByID
}

// Expect sets up expected params for UserCache.GetUserByID
func (mmGetUserByID *mUserCacheMockGetUserByID) Expect(ctx context.Context, id int64) *mUserCacheMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserCacheMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserCacheMockGetUserByIDExpectation{}
	}

	if mmGetUserByID.defaultExpectation.paramPtrs != nil {
		mmGetUserByID.mock.t.Fatalf("UserCacheMock.GetUserByID mock is already set by ExpectParams functions")
	}

	mmGetUserByID.defaultExpectation.params = &UserCacheMockGetUserByIDParams{ctx, id}
	for _, e := range mmGetUserByID.expectations {
		if minimock.Equal(e.params, mmGetUserByID.defaultExpectation.params) {
			mmGetUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByID.defaultExpectation.params)
		}
	}

	return mmGetUserByID
}

// ExpectCtxParam1 sets up expected param ctx for UserCache.GetUserByID
func (mmGetUserByID *mUserCacheMockGetUserByID) ExpectCtxParam1(ctx context.Context) *mUserCacheMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserCacheMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserCacheMockGetUserByIDExpectation{}
	}

	if mmGetUserByID.defaultExpectation.params != nil {
		mmGetUserByID.mock.t.Fatalf("UserCacheMock.GetUserByID mock is already set by Expect")
	}

	if mmGetUserByID.defaultExpectation.paramPtrs == nil {
		mmGetUserByID.defaultExpectation.paramPtrs = &UserCacheMockGetUserByIDParamPtrs{}
	}
	mmGetUserByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetUserByID
}

// ExpectIdParam2 sets up expected param id for UserCache.GetUserByID
func (mmGetUserByID *mUserCacheMockGetUserByID) ExpectIdParam2(id int64) *mUserCacheMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserCacheMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserCacheMockGetUserByIDExpectation{}
	}

	if mmGetUserByID.defaultExpectation.params != nil {
		mmGetUserByID.mock.t.Fatalf("UserCacheMock.GetUserByID mock is already set by Expect")
	}

	if mmGetUserByID.defaultExpectation.paramPtrs == nil {
		mmGetUserByID.defaultExpectation.paramPtrs = &UserCacheMockGetUserByIDParamPtrs{}
	}
	mmGetUserByID.defaultExpectation.paramPtrs.id = &id

	return mmGetUserByID
}

// Inspect accepts an inspector function that has same arguments as the UserCache.GetUserByID
func (mmGetUserByID *mUserCacheMockGetUserByID) Inspect(f func(ctx context.Context, id int64)) *mUserCacheMockGetUserByID {
	if mmGetUserByID.mock.inspectFuncGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("Inspect function is already set for UserCacheMock.GetUserByID")
	}

	mmGetUserByID.mock.inspectFuncGetUserByID = f

	return mmGetUserByID
}

// Return sets up results that will be returned by UserCache.GetUserByID
func (mmGetUserByID *mUserCacheMockGetUserByID) Return(up1 *model.User, err error) *UserCacheMock {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserCacheMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserCacheMockGetUserByIDExpectation{mock: mmGetUserByID.mock}
	}
	mmGetUserByID.defaultExpectation.results = &UserCacheMockGetUserByIDResults{up1, err}
	return mmGetUserByID.mock
}

// Set uses given function f to mock the UserCache.GetUserByID method
func (mmGetUserByID *mUserCacheMockGetUserByID) Set(f func(ctx context.Context, id int64) (up1 *model.User, err error)) *UserCacheMock {
	if mmGetUserByID.defaultExpectation != nil {
		mmGetUserByID.mock.t.Fatalf("Default expectation is already set for the UserCache.GetUserByID method")
	}

	if len(mmGetUserByID.expectations) > 0 {
		mmGetUserByID.mock.t.Fatalf("Some expectations are already set for the UserCache.GetUserByID method")
	}

	mmGetUserByID.mock.funcGetUserByID = f
	return mmGetUserByID.mock
}

// When sets expectation for the UserCache.GetUserByID which will trigger the result defined by the following
// Then helper
func (mmGetUserByID *mUserCacheMockGetUserByID) When(ctx context.Context, id int64) *UserCacheMockGetUserByIDExpectation {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserCacheMock.GetUserByID mock is already set by Set")
	}

	expectation := &UserCacheMockGetUserByIDExpectation{
		mock:   mmGetUserByID.mock,
		params: &UserCacheMockGetUserByIDParams{ctx, id},
	}
	mmGetUserByID.expectations = append(mmGetUserByID.expectations, expectation)
	return expectation
}

// Then sets up UserCache.GetUserByID return parameters for the expectation previously defined by the When method
func (e *UserCacheMockGetUserByIDExpectation) Then(up1 *model.User, err error) *UserCacheMock {
	e.results = &UserCacheMockGetUserByIDResults{up1, err}
	return e.mock
}

// Times sets number of times UserCache.GetUserByID should be invoked
func (mmGetUserByID *mUserCacheMockGetUserByID) Times(n uint64) *mUserCacheMockGetUserByID {
	if n == 0 {
		mmGetUserByID.mock.t.Fatalf("Times of UserCacheMock.GetUserByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUserByID.expectedInvocations, n)
	return mmGetUserByID
}

func (mmGetUserByID *mUserCacheMockGetUserByID) invocationsDone() bool {
	if len(mmGetUserByID.expectations) == 0 && mmGetUserByID.defaultExpectation == nil && mmGetUserByID.mock.funcGetUserByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUserByID.mock.afterGetUserByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUserByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUserByID implements cache.UserCache
func (mmGetUserByID *UserCacheMock) GetUserByID(ctx context.Context, id int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGetUserByID.beforeGetUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByID.afterGetUserByIDCounter, 1)

	if mmGetUserByID.inspectFuncGetUserByID != nil {
		mmGetUserByID.inspectFuncGetUserByID(ctx, id)
	}

	mm_params := UserCacheMockGetUserByIDParams{ctx, id}

	// Record call args
	mmGetUserByID.GetUserByIDMock.mutex.Lock()
	mmGetUserByID.GetUserByIDMock.callArgs = append(mmGetUserByID.GetUserByIDMock.callArgs, &mm_params)
	mmGetUserByID.GetUserByIDMock.mutex.Unlock()

	for _, e := range mmGetUserByID.GetUserByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUserByID.GetUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByID.GetUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByID.GetUserByIDMock.defaultExpectation.params
		mm_want_ptrs := mmGetUserByID.GetUserByIDMock.defaultExpectation.paramPtrs

		mm_got := UserCacheMockGetUserByIDParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUserByID.t.Errorf("UserCacheMock.GetUserByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGetUserByID.t.Errorf("UserCacheMock.GetUserByID got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByID.t.Errorf("UserCacheMock.GetUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByID.GetUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByID.t.Fatal("No results are set for the UserCacheMock.GetUserByID")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUserByID.funcGetUserByID != nil {
		return mmGetUserByID.funcGetUserByID(ctx, id)
	}
	mmGetUserByID.t.Fatalf("Unexpected call to UserCacheMock.GetUserByID. %v %v", ctx, id)
	return
}

// GetUserByIDAfterCounter returns a count of finished UserCacheMock.GetUserByID invocations
func (mmGetUserByID *UserCacheMock) GetUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.afterGetUserByIDCounter)
}

// GetUserByIDBeforeCounter returns a count of UserCacheMock.GetUserByID invocations
func (mmGetUserByID *UserCacheMock) GetUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.beforeGetUserByIDCounter)
}

// Calls returns a list of arguments used in each call to UserCacheMock.GetUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByID *mUserCacheMockGetUserByID) Calls() []*UserCacheMockGetUserByIDParams {
	mmGetUserByID.mutex.RLock()

	argCopy := make([]*UserCacheMockGetUserByIDParams, len(mmGetUserByID.callArgs))
	copy(argCopy, mmGetUserByID.callArgs)

	mmGetUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByIDDone returns true if the count of the GetUserByID invocations corresponds
// the number of defined expectations
func (m *UserCacheMock) MinimockGetUserByIDDone() bool {
	if m.GetUserByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserByIDMock.invocationsDone()
}

// MinimockGetUserByIDInspect logs each unmet expectation
func (m *UserCacheMock) MinimockGetUserByIDInspect() {
	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheMock.GetUserByID with params: %#v", *e.params)
		}
	}

	afterGetUserByIDCounter := mm_atomic.LoadUint64(&m.afterGetUserByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByIDMock.defaultExpectation != nil && afterGetUserByIDCounter < 1 {
		if m.GetUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCacheMock.GetUserByID")
		} else {
			m.t.Errorf("Expected call to UserCacheMock.GetUserByID with params: %#v", *m.GetUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByID != nil && afterGetUserByIDCounter < 1 {
		m.t.Error("Expected call to UserCacheMock.GetUserByID")
	}

	if !m.GetUserByIDMock.invocationsDone() && afterGetUserByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheMock.GetUserByID but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserByIDMock.expectedInvocations), afterGetUserByIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserCacheMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateUserInspect()

			m.MinimockDeleteUserByIDInspect()

			m.MinimockGetUserByIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserCacheMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserCacheMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateUserDone() &&
		m.MinimockDeleteUserByIDDone() &&
		m.MinimockGetUserByIDDone()
}
