// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/BelyaevEI/microservices_auth/internal/repository.UserRepository -o user_repository_minimock.go -n UserRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/BelyaevEI/microservices_auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// UserRepositoryMock implements repository.UserRepository
type UserRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateUser          func(ctx context.Context, userCreate *model.UserCreate) (i1 int64, err error)
	inspectFuncCreateUser   func(ctx context.Context, userCreate *model.UserCreate)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mUserRepositoryMockCreateUser

	funcDeleteUserByID          func(ctx context.Context, id int64) (err error)
	inspectFuncDeleteUserByID   func(ctx context.Context, id int64)
	afterDeleteUserByIDCounter  uint64
	beforeDeleteUserByIDCounter uint64
	DeleteUserByIDMock          mUserRepositoryMockDeleteUserByID

	funcGetUserByID          func(ctx context.Context, id int64) (up1 *model.User, err error)
	inspectFuncGetUserByID   func(ctx context.Context, id int64)
	afterGetUserByIDCounter  uint64
	beforeGetUserByIDCounter uint64
	GetUserByIDMock          mUserRepositoryMockGetUserByID

	funcUpdateUserByID          func(ctx context.Context, id int64, userUpdate *model.UserUpdate) (err error)
	inspectFuncUpdateUserByID   func(ctx context.Context, id int64, userUpdate *model.UserUpdate)
	afterUpdateUserByIDCounter  uint64
	beforeUpdateUserByIDCounter uint64
	UpdateUserByIDMock          mUserRepositoryMockUpdateUserByID
}

// NewUserRepositoryMock returns a mock for repository.UserRepository
func NewUserRepositoryMock(t minimock.Tester) *UserRepositoryMock {
	m := &UserRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateUserMock = mUserRepositoryMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*UserRepositoryMockCreateUserParams{}

	m.DeleteUserByIDMock = mUserRepositoryMockDeleteUserByID{mock: m}
	m.DeleteUserByIDMock.callArgs = []*UserRepositoryMockDeleteUserByIDParams{}

	m.GetUserByIDMock = mUserRepositoryMockGetUserByID{mock: m}
	m.GetUserByIDMock.callArgs = []*UserRepositoryMockGetUserByIDParams{}

	m.UpdateUserByIDMock = mUserRepositoryMockUpdateUserByID{mock: m}
	m.UpdateUserByIDMock.callArgs = []*UserRepositoryMockUpdateUserByIDParams{}

	// t.Cleanup(m.MinimockFinish)

	return m
}

type mUserRepositoryMockCreateUser struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockCreateUserExpectation
	expectations       []*UserRepositoryMockCreateUserExpectation

	callArgs []*UserRepositoryMockCreateUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserRepositoryMockCreateUserExpectation specifies expectation struct of the UserRepository.CreateUser
type UserRepositoryMockCreateUserExpectation struct {
	mock      *UserRepositoryMock
	params    *UserRepositoryMockCreateUserParams
	paramPtrs *UserRepositoryMockCreateUserParamPtrs
	results   *UserRepositoryMockCreateUserResults
	Counter   uint64
}

// UserRepositoryMockCreateUserParams contains parameters of the UserRepository.CreateUser
type UserRepositoryMockCreateUserParams struct {
	ctx        context.Context
	userCreate *model.UserCreate
}

// UserRepositoryMockCreateUserParamPtrs contains pointers to parameters of the UserRepository.CreateUser
type UserRepositoryMockCreateUserParamPtrs struct {
	ctx        *context.Context
	userCreate **model.UserCreate
}

// UserRepositoryMockCreateUserResults contains results of the UserRepository.CreateUser
type UserRepositoryMockCreateUserResults struct {
	i1  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateUser *mUserRepositoryMockCreateUser) Optional() *mUserRepositoryMockCreateUser {
	mmCreateUser.optional = true
	return mmCreateUser
}

// Expect sets up expected params for UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Expect(ctx context.Context, userCreate *model.UserCreate) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.paramPtrs != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by ExpectParams functions")
	}

	mmCreateUser.defaultExpectation.params = &UserRepositoryMockCreateUserParams{ctx, userCreate}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserRepositoryMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateUser
}

// ExpectUserCreateParam2 sets up expected param userCreate for UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) ExpectUserCreateParam2(userCreate *model.UserCreate) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserRepositoryMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.userCreate = &userCreate

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Inspect(f func(ctx context.Context, userCreate *model.UserCreate)) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Return(i1 int64, err error) *UserRepositoryMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &UserRepositoryMockCreateUserResults{i1, err}
	return mmCreateUser.mock
}

// Set uses given function f to mock the UserRepository.CreateUser method
func (mmCreateUser *mUserRepositoryMockCreateUser) Set(f func(ctx context.Context, userCreate *model.UserCreate) (i1 int64, err error)) *UserRepositoryMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the UserRepository.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the UserRepository.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the UserRepository.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mUserRepositoryMockCreateUser) When(ctx context.Context, userCreate *model.UserCreate) *UserRepositoryMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	expectation := &UserRepositoryMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &UserRepositoryMockCreateUserParams{ctx, userCreate},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.CreateUser return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockCreateUserExpectation) Then(i1 int64, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockCreateUserResults{i1, err}
	return e.mock
}

// Times sets number of times UserRepository.CreateUser should be invoked
func (mmCreateUser *mUserRepositoryMockCreateUser) Times(n uint64) *mUserRepositoryMockCreateUser {
	if n == 0 {
		mmCreateUser.mock.t.Fatalf("Times of UserRepositoryMock.CreateUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateUser.expectedInvocations, n)
	return mmCreateUser
}

func (mmCreateUser *mUserRepositoryMockCreateUser) invocationsDone() bool {
	if len(mmCreateUser.expectations) == 0 && mmCreateUser.defaultExpectation == nil && mmCreateUser.mock.funcCreateUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateUser.mock.afterCreateUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateUser implements repository.UserRepository
func (mmCreateUser *UserRepositoryMock) CreateUser(ctx context.Context, userCreate *model.UserCreate) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, userCreate)
	}

	mm_params := UserRepositoryMockCreateUserParams{ctx, userCreate}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, &mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_want_ptrs := mmCreateUser.CreateUserMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockCreateUserParams{ctx, userCreate}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userCreate != nil && !minimock.Equal(*mm_want_ptrs.userCreate, mm_got.userCreate) {
				mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameter userCreate, want: %#v, got: %#v%s\n", *mm_want_ptrs.userCreate, mm_got.userCreate, minimock.Diff(*mm_want_ptrs.userCreate, mm_got.userCreate))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the UserRepositoryMock.CreateUser")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, userCreate)
	}
	mmCreateUser.t.Fatalf("Unexpected call to UserRepositoryMock.CreateUser. %v %v", ctx, userCreate)
	return
}

// CreateUserAfterCounter returns a count of finished UserRepositoryMock.CreateUser invocations
func (mmCreateUser *UserRepositoryMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of UserRepositoryMock.CreateUser invocations
func (mmCreateUser *UserRepositoryMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mUserRepositoryMockCreateUser) Calls() []*UserRepositoryMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*UserRepositoryMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockCreateUserDone() bool {
	if m.CreateUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateUserMock.invocationsDone()
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.CreateUser with params: %#v", *e.params)
		}
	}

	afterCreateUserCounter := mm_atomic.LoadUint64(&m.afterCreateUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && afterCreateUserCounter < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && afterCreateUserCounter < 1 {
		m.t.Error("Expected call to UserRepositoryMock.CreateUser")
	}

	if !m.CreateUserMock.invocationsDone() && afterCreateUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.CreateUser but found %d calls",
			mm_atomic.LoadUint64(&m.CreateUserMock.expectedInvocations), afterCreateUserCounter)
	}
}

type mUserRepositoryMockDeleteUserByID struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockDeleteUserByIDExpectation
	expectations       []*UserRepositoryMockDeleteUserByIDExpectation

	callArgs []*UserRepositoryMockDeleteUserByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserRepositoryMockDeleteUserByIDExpectation specifies expectation struct of the UserRepository.DeleteUserByID
type UserRepositoryMockDeleteUserByIDExpectation struct {
	mock      *UserRepositoryMock
	params    *UserRepositoryMockDeleteUserByIDParams
	paramPtrs *UserRepositoryMockDeleteUserByIDParamPtrs
	results   *UserRepositoryMockDeleteUserByIDResults
	Counter   uint64
}

// UserRepositoryMockDeleteUserByIDParams contains parameters of the UserRepository.DeleteUserByID
type UserRepositoryMockDeleteUserByIDParams struct {
	ctx context.Context
	id  int64
}

// UserRepositoryMockDeleteUserByIDParamPtrs contains pointers to parameters of the UserRepository.DeleteUserByID
type UserRepositoryMockDeleteUserByIDParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// UserRepositoryMockDeleteUserByIDResults contains results of the UserRepository.DeleteUserByID
type UserRepositoryMockDeleteUserByIDResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) Optional() *mUserRepositoryMockDeleteUserByID {
	mmDeleteUserByID.optional = true
	return mmDeleteUserByID
}

// Expect sets up expected params for UserRepository.DeleteUserByID
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) Expect(ctx context.Context, id int64) *mUserRepositoryMockDeleteUserByID {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserRepositoryMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserRepositoryMockDeleteUserByIDExpectation{}
	}

	if mmDeleteUserByID.defaultExpectation.paramPtrs != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserRepositoryMock.DeleteUserByID mock is already set by ExpectParams functions")
	}

	mmDeleteUserByID.defaultExpectation.params = &UserRepositoryMockDeleteUserByIDParams{ctx, id}
	for _, e := range mmDeleteUserByID.expectations {
		if minimock.Equal(e.params, mmDeleteUserByID.defaultExpectation.params) {
			mmDeleteUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteUserByID.defaultExpectation.params)
		}
	}

	return mmDeleteUserByID
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.DeleteUserByID
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockDeleteUserByID {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserRepositoryMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserRepositoryMockDeleteUserByIDExpectation{}
	}

	if mmDeleteUserByID.defaultExpectation.params != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserRepositoryMock.DeleteUserByID mock is already set by Expect")
	}

	if mmDeleteUserByID.defaultExpectation.paramPtrs == nil {
		mmDeleteUserByID.defaultExpectation.paramPtrs = &UserRepositoryMockDeleteUserByIDParamPtrs{}
	}
	mmDeleteUserByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteUserByID
}

// ExpectIdParam2 sets up expected param id for UserRepository.DeleteUserByID
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) ExpectIdParam2(id int64) *mUserRepositoryMockDeleteUserByID {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserRepositoryMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserRepositoryMockDeleteUserByIDExpectation{}
	}

	if mmDeleteUserByID.defaultExpectation.params != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserRepositoryMock.DeleteUserByID mock is already set by Expect")
	}

	if mmDeleteUserByID.defaultExpectation.paramPtrs == nil {
		mmDeleteUserByID.defaultExpectation.paramPtrs = &UserRepositoryMockDeleteUserByIDParamPtrs{}
	}
	mmDeleteUserByID.defaultExpectation.paramPtrs.id = &id

	return mmDeleteUserByID
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.DeleteUserByID
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) Inspect(f func(ctx context.Context, id int64)) *mUserRepositoryMockDeleteUserByID {
	if mmDeleteUserByID.mock.inspectFuncDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.DeleteUserByID")
	}

	mmDeleteUserByID.mock.inspectFuncDeleteUserByID = f

	return mmDeleteUserByID
}

// Return sets up results that will be returned by UserRepository.DeleteUserByID
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) Return(err error) *UserRepositoryMock {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserRepositoryMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserRepositoryMockDeleteUserByIDExpectation{mock: mmDeleteUserByID.mock}
	}
	mmDeleteUserByID.defaultExpectation.results = &UserRepositoryMockDeleteUserByIDResults{err}
	return mmDeleteUserByID.mock
}

// Set uses given function f to mock the UserRepository.DeleteUserByID method
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) Set(f func(ctx context.Context, id int64) (err error)) *UserRepositoryMock {
	if mmDeleteUserByID.defaultExpectation != nil {
		mmDeleteUserByID.mock.t.Fatalf("Default expectation is already set for the UserRepository.DeleteUserByID method")
	}

	if len(mmDeleteUserByID.expectations) > 0 {
		mmDeleteUserByID.mock.t.Fatalf("Some expectations are already set for the UserRepository.DeleteUserByID method")
	}

	mmDeleteUserByID.mock.funcDeleteUserByID = f
	return mmDeleteUserByID.mock
}

// When sets expectation for the UserRepository.DeleteUserByID which will trigger the result defined by the following
// Then helper
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) When(ctx context.Context, id int64) *UserRepositoryMockDeleteUserByIDExpectation {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserRepositoryMock.DeleteUserByID mock is already set by Set")
	}

	expectation := &UserRepositoryMockDeleteUserByIDExpectation{
		mock:   mmDeleteUserByID.mock,
		params: &UserRepositoryMockDeleteUserByIDParams{ctx, id},
	}
	mmDeleteUserByID.expectations = append(mmDeleteUserByID.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.DeleteUserByID return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockDeleteUserByIDExpectation) Then(err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockDeleteUserByIDResults{err}
	return e.mock
}

// Times sets number of times UserRepository.DeleteUserByID should be invoked
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) Times(n uint64) *mUserRepositoryMockDeleteUserByID {
	if n == 0 {
		mmDeleteUserByID.mock.t.Fatalf("Times of UserRepositoryMock.DeleteUserByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteUserByID.expectedInvocations, n)
	return mmDeleteUserByID
}

func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) invocationsDone() bool {
	if len(mmDeleteUserByID.expectations) == 0 && mmDeleteUserByID.defaultExpectation == nil && mmDeleteUserByID.mock.funcDeleteUserByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteUserByID.mock.afterDeleteUserByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteUserByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteUserByID implements repository.UserRepository
func (mmDeleteUserByID *UserRepositoryMock) DeleteUserByID(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteUserByID.beforeDeleteUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteUserByID.afterDeleteUserByIDCounter, 1)

	if mmDeleteUserByID.inspectFuncDeleteUserByID != nil {
		mmDeleteUserByID.inspectFuncDeleteUserByID(ctx, id)
	}

	mm_params := UserRepositoryMockDeleteUserByIDParams{ctx, id}

	// Record call args
	mmDeleteUserByID.DeleteUserByIDMock.mutex.Lock()
	mmDeleteUserByID.DeleteUserByIDMock.callArgs = append(mmDeleteUserByID.DeleteUserByIDMock.callArgs, &mm_params)
	mmDeleteUserByID.DeleteUserByIDMock.mutex.Unlock()

	for _, e := range mmDeleteUserByID.DeleteUserByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockDeleteUserByIDParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteUserByID.t.Errorf("UserRepositoryMock.DeleteUserByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDeleteUserByID.t.Errorf("UserRepositoryMock.DeleteUserByID got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteUserByID.t.Errorf("UserRepositoryMock.DeleteUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteUserByID.t.Fatal("No results are set for the UserRepositoryMock.DeleteUserByID")
		}
		return (*mm_results).err
	}
	if mmDeleteUserByID.funcDeleteUserByID != nil {
		return mmDeleteUserByID.funcDeleteUserByID(ctx, id)
	}
	mmDeleteUserByID.t.Fatalf("Unexpected call to UserRepositoryMock.DeleteUserByID. %v %v", ctx, id)
	return
}

// DeleteUserByIDAfterCounter returns a count of finished UserRepositoryMock.DeleteUserByID invocations
func (mmDeleteUserByID *UserRepositoryMock) DeleteUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUserByID.afterDeleteUserByIDCounter)
}

// DeleteUserByIDBeforeCounter returns a count of UserRepositoryMock.DeleteUserByID invocations
func (mmDeleteUserByID *UserRepositoryMock) DeleteUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUserByID.beforeDeleteUserByIDCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.DeleteUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteUserByID *mUserRepositoryMockDeleteUserByID) Calls() []*UserRepositoryMockDeleteUserByIDParams {
	mmDeleteUserByID.mutex.RLock()

	argCopy := make([]*UserRepositoryMockDeleteUserByIDParams, len(mmDeleteUserByID.callArgs))
	copy(argCopy, mmDeleteUserByID.callArgs)

	mmDeleteUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteUserByIDDone returns true if the count of the DeleteUserByID invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockDeleteUserByIDDone() bool {
	if m.DeleteUserByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteUserByIDMock.invocationsDone()
}

// MinimockDeleteUserByIDInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockDeleteUserByIDInspect() {
	for _, e := range m.DeleteUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.DeleteUserByID with params: %#v", *e.params)
		}
	}

	afterDeleteUserByIDCounter := mm_atomic.LoadUint64(&m.afterDeleteUserByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteUserByIDMock.defaultExpectation != nil && afterDeleteUserByIDCounter < 1 {
		if m.DeleteUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.DeleteUserByID")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.DeleteUserByID with params: %#v", *m.DeleteUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteUserByID != nil && afterDeleteUserByIDCounter < 1 {
		m.t.Error("Expected call to UserRepositoryMock.DeleteUserByID")
	}

	if !m.DeleteUserByIDMock.invocationsDone() && afterDeleteUserByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.DeleteUserByID but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteUserByIDMock.expectedInvocations), afterDeleteUserByIDCounter)
	}
}

type mUserRepositoryMockGetUserByID struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockGetUserByIDExpectation
	expectations       []*UserRepositoryMockGetUserByIDExpectation

	callArgs []*UserRepositoryMockGetUserByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserRepositoryMockGetUserByIDExpectation specifies expectation struct of the UserRepository.GetUserByID
type UserRepositoryMockGetUserByIDExpectation struct {
	mock      *UserRepositoryMock
	params    *UserRepositoryMockGetUserByIDParams
	paramPtrs *UserRepositoryMockGetUserByIDParamPtrs
	results   *UserRepositoryMockGetUserByIDResults
	Counter   uint64
}

// UserRepositoryMockGetUserByIDParams contains parameters of the UserRepository.GetUserByID
type UserRepositoryMockGetUserByIDParams struct {
	ctx context.Context
	id  int64
}

// UserRepositoryMockGetUserByIDParamPtrs contains pointers to parameters of the UserRepository.GetUserByID
type UserRepositoryMockGetUserByIDParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// UserRepositoryMockGetUserByIDResults contains results of the UserRepository.GetUserByID
type UserRepositoryMockGetUserByIDResults struct {
	up1 *model.User
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUserByID *mUserRepositoryMockGetUserByID) Optional() *mUserRepositoryMockGetUserByID {
	mmGetUserByID.optional = true
	return mmGetUserByID
}

// Expect sets up expected params for UserRepository.GetUserByID
func (mmGetUserByID *mUserRepositoryMockGetUserByID) Expect(ctx context.Context, id int64) *mUserRepositoryMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserRepositoryMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserRepositoryMockGetUserByIDExpectation{}
	}

	if mmGetUserByID.defaultExpectation.paramPtrs != nil {
		mmGetUserByID.mock.t.Fatalf("UserRepositoryMock.GetUserByID mock is already set by ExpectParams functions")
	}

	mmGetUserByID.defaultExpectation.params = &UserRepositoryMockGetUserByIDParams{ctx, id}
	for _, e := range mmGetUserByID.expectations {
		if minimock.Equal(e.params, mmGetUserByID.defaultExpectation.params) {
			mmGetUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByID.defaultExpectation.params)
		}
	}

	return mmGetUserByID
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.GetUserByID
func (mmGetUserByID *mUserRepositoryMockGetUserByID) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserRepositoryMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserRepositoryMockGetUserByIDExpectation{}
	}

	if mmGetUserByID.defaultExpectation.params != nil {
		mmGetUserByID.mock.t.Fatalf("UserRepositoryMock.GetUserByID mock is already set by Expect")
	}

	if mmGetUserByID.defaultExpectation.paramPtrs == nil {
		mmGetUserByID.defaultExpectation.paramPtrs = &UserRepositoryMockGetUserByIDParamPtrs{}
	}
	mmGetUserByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetUserByID
}

// ExpectIdParam2 sets up expected param id for UserRepository.GetUserByID
func (mmGetUserByID *mUserRepositoryMockGetUserByID) ExpectIdParam2(id int64) *mUserRepositoryMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserRepositoryMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserRepositoryMockGetUserByIDExpectation{}
	}

	if mmGetUserByID.defaultExpectation.params != nil {
		mmGetUserByID.mock.t.Fatalf("UserRepositoryMock.GetUserByID mock is already set by Expect")
	}

	if mmGetUserByID.defaultExpectation.paramPtrs == nil {
		mmGetUserByID.defaultExpectation.paramPtrs = &UserRepositoryMockGetUserByIDParamPtrs{}
	}
	mmGetUserByID.defaultExpectation.paramPtrs.id = &id

	return mmGetUserByID
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.GetUserByID
func (mmGetUserByID *mUserRepositoryMockGetUserByID) Inspect(f func(ctx context.Context, id int64)) *mUserRepositoryMockGetUserByID {
	if mmGetUserByID.mock.inspectFuncGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.GetUserByID")
	}

	mmGetUserByID.mock.inspectFuncGetUserByID = f

	return mmGetUserByID
}

// Return sets up results that will be returned by UserRepository.GetUserByID
func (mmGetUserByID *mUserRepositoryMockGetUserByID) Return(up1 *model.User, err error) *UserRepositoryMock {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserRepositoryMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserRepositoryMockGetUserByIDExpectation{mock: mmGetUserByID.mock}
	}
	mmGetUserByID.defaultExpectation.results = &UserRepositoryMockGetUserByIDResults{up1, err}
	return mmGetUserByID.mock
}

// Set uses given function f to mock the UserRepository.GetUserByID method
func (mmGetUserByID *mUserRepositoryMockGetUserByID) Set(f func(ctx context.Context, id int64) (up1 *model.User, err error)) *UserRepositoryMock {
	if mmGetUserByID.defaultExpectation != nil {
		mmGetUserByID.mock.t.Fatalf("Default expectation is already set for the UserRepository.GetUserByID method")
	}

	if len(mmGetUserByID.expectations) > 0 {
		mmGetUserByID.mock.t.Fatalf("Some expectations are already set for the UserRepository.GetUserByID method")
	}

	mmGetUserByID.mock.funcGetUserByID = f
	return mmGetUserByID.mock
}

// When sets expectation for the UserRepository.GetUserByID which will trigger the result defined by the following
// Then helper
func (mmGetUserByID *mUserRepositoryMockGetUserByID) When(ctx context.Context, id int64) *UserRepositoryMockGetUserByIDExpectation {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserRepositoryMock.GetUserByID mock is already set by Set")
	}

	expectation := &UserRepositoryMockGetUserByIDExpectation{
		mock:   mmGetUserByID.mock,
		params: &UserRepositoryMockGetUserByIDParams{ctx, id},
	}
	mmGetUserByID.expectations = append(mmGetUserByID.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.GetUserByID return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockGetUserByIDExpectation) Then(up1 *model.User, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockGetUserByIDResults{up1, err}
	return e.mock
}

// Times sets number of times UserRepository.GetUserByID should be invoked
func (mmGetUserByID *mUserRepositoryMockGetUserByID) Times(n uint64) *mUserRepositoryMockGetUserByID {
	if n == 0 {
		mmGetUserByID.mock.t.Fatalf("Times of UserRepositoryMock.GetUserByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUserByID.expectedInvocations, n)
	return mmGetUserByID
}

func (mmGetUserByID *mUserRepositoryMockGetUserByID) invocationsDone() bool {
	if len(mmGetUserByID.expectations) == 0 && mmGetUserByID.defaultExpectation == nil && mmGetUserByID.mock.funcGetUserByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUserByID.mock.afterGetUserByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUserByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUserByID implements repository.UserRepository
func (mmGetUserByID *UserRepositoryMock) GetUserByID(ctx context.Context, id int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGetUserByID.beforeGetUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByID.afterGetUserByIDCounter, 1)

	if mmGetUserByID.inspectFuncGetUserByID != nil {
		mmGetUserByID.inspectFuncGetUserByID(ctx, id)
	}

	mm_params := UserRepositoryMockGetUserByIDParams{ctx, id}

	// Record call args
	mmGetUserByID.GetUserByIDMock.mutex.Lock()
	mmGetUserByID.GetUserByIDMock.callArgs = append(mmGetUserByID.GetUserByIDMock.callArgs, &mm_params)
	mmGetUserByID.GetUserByIDMock.mutex.Unlock()

	for _, e := range mmGetUserByID.GetUserByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUserByID.GetUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByID.GetUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByID.GetUserByIDMock.defaultExpectation.params
		mm_want_ptrs := mmGetUserByID.GetUserByIDMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockGetUserByIDParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUserByID.t.Errorf("UserRepositoryMock.GetUserByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGetUserByID.t.Errorf("UserRepositoryMock.GetUserByID got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByID.t.Errorf("UserRepositoryMock.GetUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByID.GetUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByID.t.Fatal("No results are set for the UserRepositoryMock.GetUserByID")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUserByID.funcGetUserByID != nil {
		return mmGetUserByID.funcGetUserByID(ctx, id)
	}
	mmGetUserByID.t.Fatalf("Unexpected call to UserRepositoryMock.GetUserByID. %v %v", ctx, id)
	return
}

// GetUserByIDAfterCounter returns a count of finished UserRepositoryMock.GetUserByID invocations
func (mmGetUserByID *UserRepositoryMock) GetUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.afterGetUserByIDCounter)
}

// GetUserByIDBeforeCounter returns a count of UserRepositoryMock.GetUserByID invocations
func (mmGetUserByID *UserRepositoryMock) GetUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.beforeGetUserByIDCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.GetUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByID *mUserRepositoryMockGetUserByID) Calls() []*UserRepositoryMockGetUserByIDParams {
	mmGetUserByID.mutex.RLock()

	argCopy := make([]*UserRepositoryMockGetUserByIDParams, len(mmGetUserByID.callArgs))
	copy(argCopy, mmGetUserByID.callArgs)

	mmGetUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByIDDone returns true if the count of the GetUserByID invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockGetUserByIDDone() bool {
	if m.GetUserByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserByIDMock.invocationsDone()
}

// MinimockGetUserByIDInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockGetUserByIDInspect() {
	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUserByID with params: %#v", *e.params)
		}
	}

	afterGetUserByIDCounter := mm_atomic.LoadUint64(&m.afterGetUserByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByIDMock.defaultExpectation != nil && afterGetUserByIDCounter < 1 {
		if m.GetUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.GetUserByID")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUserByID with params: %#v", *m.GetUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByID != nil && afterGetUserByIDCounter < 1 {
		m.t.Error("Expected call to UserRepositoryMock.GetUserByID")
	}

	if !m.GetUserByIDMock.invocationsDone() && afterGetUserByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.GetUserByID but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserByIDMock.expectedInvocations), afterGetUserByIDCounter)
	}
}

type mUserRepositoryMockUpdateUserByID struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockUpdateUserByIDExpectation
	expectations       []*UserRepositoryMockUpdateUserByIDExpectation

	callArgs []*UserRepositoryMockUpdateUserByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserRepositoryMockUpdateUserByIDExpectation specifies expectation struct of the UserRepository.UpdateUserByID
type UserRepositoryMockUpdateUserByIDExpectation struct {
	mock      *UserRepositoryMock
	params    *UserRepositoryMockUpdateUserByIDParams
	paramPtrs *UserRepositoryMockUpdateUserByIDParamPtrs
	results   *UserRepositoryMockUpdateUserByIDResults
	Counter   uint64
}

// UserRepositoryMockUpdateUserByIDParams contains parameters of the UserRepository.UpdateUserByID
type UserRepositoryMockUpdateUserByIDParams struct {
	ctx        context.Context
	id         int64
	userUpdate *model.UserUpdate
}

// UserRepositoryMockUpdateUserByIDParamPtrs contains pointers to parameters of the UserRepository.UpdateUserByID
type UserRepositoryMockUpdateUserByIDParamPtrs struct {
	ctx        *context.Context
	id         *int64
	userUpdate **model.UserUpdate
}

// UserRepositoryMockUpdateUserByIDResults contains results of the UserRepository.UpdateUserByID
type UserRepositoryMockUpdateUserByIDResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) Optional() *mUserRepositoryMockUpdateUserByID {
	mmUpdateUserByID.optional = true
	return mmUpdateUserByID
}

// Expect sets up expected params for UserRepository.UpdateUserByID
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) Expect(ctx context.Context, id int64, userUpdate *model.UserUpdate) *mUserRepositoryMockUpdateUserByID {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserRepositoryMockUpdateUserByIDExpectation{}
	}

	if mmUpdateUserByID.defaultExpectation.paramPtrs != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by ExpectParams functions")
	}

	mmUpdateUserByID.defaultExpectation.params = &UserRepositoryMockUpdateUserByIDParams{ctx, id, userUpdate}
	for _, e := range mmUpdateUserByID.expectations {
		if minimock.Equal(e.params, mmUpdateUserByID.defaultExpectation.params) {
			mmUpdateUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateUserByID.defaultExpectation.params)
		}
	}

	return mmUpdateUserByID
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.UpdateUserByID
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockUpdateUserByID {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserRepositoryMockUpdateUserByIDExpectation{}
	}

	if mmUpdateUserByID.defaultExpectation.params != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by Expect")
	}

	if mmUpdateUserByID.defaultExpectation.paramPtrs == nil {
		mmUpdateUserByID.defaultExpectation.paramPtrs = &UserRepositoryMockUpdateUserByIDParamPtrs{}
	}
	mmUpdateUserByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmUpdateUserByID
}

// ExpectIdParam2 sets up expected param id for UserRepository.UpdateUserByID
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) ExpectIdParam2(id int64) *mUserRepositoryMockUpdateUserByID {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserRepositoryMockUpdateUserByIDExpectation{}
	}

	if mmUpdateUserByID.defaultExpectation.params != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by Expect")
	}

	if mmUpdateUserByID.defaultExpectation.paramPtrs == nil {
		mmUpdateUserByID.defaultExpectation.paramPtrs = &UserRepositoryMockUpdateUserByIDParamPtrs{}
	}
	mmUpdateUserByID.defaultExpectation.paramPtrs.id = &id

	return mmUpdateUserByID
}

// ExpectUserUpdateParam3 sets up expected param userUpdate for UserRepository.UpdateUserByID
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) ExpectUserUpdateParam3(userUpdate *model.UserUpdate) *mUserRepositoryMockUpdateUserByID {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserRepositoryMockUpdateUserByIDExpectation{}
	}

	if mmUpdateUserByID.defaultExpectation.params != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by Expect")
	}

	if mmUpdateUserByID.defaultExpectation.paramPtrs == nil {
		mmUpdateUserByID.defaultExpectation.paramPtrs = &UserRepositoryMockUpdateUserByIDParamPtrs{}
	}
	mmUpdateUserByID.defaultExpectation.paramPtrs.userUpdate = &userUpdate

	return mmUpdateUserByID
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.UpdateUserByID
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) Inspect(f func(ctx context.Context, id int64, userUpdate *model.UserUpdate)) *mUserRepositoryMockUpdateUserByID {
	if mmUpdateUserByID.mock.inspectFuncUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.UpdateUserByID")
	}

	mmUpdateUserByID.mock.inspectFuncUpdateUserByID = f

	return mmUpdateUserByID
}

// Return sets up results that will be returned by UserRepository.UpdateUserByID
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) Return(err error) *UserRepositoryMock {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserRepositoryMockUpdateUserByIDExpectation{mock: mmUpdateUserByID.mock}
	}
	mmUpdateUserByID.defaultExpectation.results = &UserRepositoryMockUpdateUserByIDResults{err}
	return mmUpdateUserByID.mock
}

// Set uses given function f to mock the UserRepository.UpdateUserByID method
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) Set(f func(ctx context.Context, id int64, userUpdate *model.UserUpdate) (err error)) *UserRepositoryMock {
	if mmUpdateUserByID.defaultExpectation != nil {
		mmUpdateUserByID.mock.t.Fatalf("Default expectation is already set for the UserRepository.UpdateUserByID method")
	}

	if len(mmUpdateUserByID.expectations) > 0 {
		mmUpdateUserByID.mock.t.Fatalf("Some expectations are already set for the UserRepository.UpdateUserByID method")
	}

	mmUpdateUserByID.mock.funcUpdateUserByID = f
	return mmUpdateUserByID.mock
}

// When sets expectation for the UserRepository.UpdateUserByID which will trigger the result defined by the following
// Then helper
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) When(ctx context.Context, id int64, userUpdate *model.UserUpdate) *UserRepositoryMockUpdateUserByIDExpectation {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserRepositoryMock.UpdateUserByID mock is already set by Set")
	}

	expectation := &UserRepositoryMockUpdateUserByIDExpectation{
		mock:   mmUpdateUserByID.mock,
		params: &UserRepositoryMockUpdateUserByIDParams{ctx, id, userUpdate},
	}
	mmUpdateUserByID.expectations = append(mmUpdateUserByID.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.UpdateUserByID return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockUpdateUserByIDExpectation) Then(err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockUpdateUserByIDResults{err}
	return e.mock
}

// Times sets number of times UserRepository.UpdateUserByID should be invoked
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) Times(n uint64) *mUserRepositoryMockUpdateUserByID {
	if n == 0 {
		mmUpdateUserByID.mock.t.Fatalf("Times of UserRepositoryMock.UpdateUserByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateUserByID.expectedInvocations, n)
	return mmUpdateUserByID
}

func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) invocationsDone() bool {
	if len(mmUpdateUserByID.expectations) == 0 && mmUpdateUserByID.defaultExpectation == nil && mmUpdateUserByID.mock.funcUpdateUserByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateUserByID.mock.afterUpdateUserByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateUserByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateUserByID implements repository.UserRepository
func (mmUpdateUserByID *UserRepositoryMock) UpdateUserByID(ctx context.Context, id int64, userUpdate *model.UserUpdate) (err error) {
	mm_atomic.AddUint64(&mmUpdateUserByID.beforeUpdateUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateUserByID.afterUpdateUserByIDCounter, 1)

	if mmUpdateUserByID.inspectFuncUpdateUserByID != nil {
		mmUpdateUserByID.inspectFuncUpdateUserByID(ctx, id, userUpdate)
	}

	mm_params := UserRepositoryMockUpdateUserByIDParams{ctx, id, userUpdate}

	// Record call args
	mmUpdateUserByID.UpdateUserByIDMock.mutex.Lock()
	mmUpdateUserByID.UpdateUserByIDMock.callArgs = append(mmUpdateUserByID.UpdateUserByIDMock.callArgs, &mm_params)
	mmUpdateUserByID.UpdateUserByIDMock.mutex.Unlock()

	for _, e := range mmUpdateUserByID.UpdateUserByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockUpdateUserByIDParams{ctx, id, userUpdate}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateUserByID.t.Errorf("UserRepositoryMock.UpdateUserByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmUpdateUserByID.t.Errorf("UserRepositoryMock.UpdateUserByID got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

			if mm_want_ptrs.userUpdate != nil && !minimock.Equal(*mm_want_ptrs.userUpdate, mm_got.userUpdate) {
				mmUpdateUserByID.t.Errorf("UserRepositoryMock.UpdateUserByID got unexpected parameter userUpdate, want: %#v, got: %#v%s\n", *mm_want_ptrs.userUpdate, mm_got.userUpdate, minimock.Diff(*mm_want_ptrs.userUpdate, mm_got.userUpdate))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateUserByID.t.Errorf("UserRepositoryMock.UpdateUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateUserByID.t.Fatal("No results are set for the UserRepositoryMock.UpdateUserByID")
		}
		return (*mm_results).err
	}
	if mmUpdateUserByID.funcUpdateUserByID != nil {
		return mmUpdateUserByID.funcUpdateUserByID(ctx, id, userUpdate)
	}
	mmUpdateUserByID.t.Fatalf("Unexpected call to UserRepositoryMock.UpdateUserByID. %v %v %v", ctx, id, userUpdate)
	return
}

// UpdateUserByIDAfterCounter returns a count of finished UserRepositoryMock.UpdateUserByID invocations
func (mmUpdateUserByID *UserRepositoryMock) UpdateUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUserByID.afterUpdateUserByIDCounter)
}

// UpdateUserByIDBeforeCounter returns a count of UserRepositoryMock.UpdateUserByID invocations
func (mmUpdateUserByID *UserRepositoryMock) UpdateUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUserByID.beforeUpdateUserByIDCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.UpdateUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateUserByID *mUserRepositoryMockUpdateUserByID) Calls() []*UserRepositoryMockUpdateUserByIDParams {
	mmUpdateUserByID.mutex.RLock()

	argCopy := make([]*UserRepositoryMockUpdateUserByIDParams, len(mmUpdateUserByID.callArgs))
	copy(argCopy, mmUpdateUserByID.callArgs)

	mmUpdateUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateUserByIDDone returns true if the count of the UpdateUserByID invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockUpdateUserByIDDone() bool {
	if m.UpdateUserByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateUserByIDMock.invocationsDone()
}

// MinimockUpdateUserByIDInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockUpdateUserByIDInspect() {
	for _, e := range m.UpdateUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.UpdateUserByID with params: %#v", *e.params)
		}
	}

	afterUpdateUserByIDCounter := mm_atomic.LoadUint64(&m.afterUpdateUserByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateUserByIDMock.defaultExpectation != nil && afterUpdateUserByIDCounter < 1 {
		if m.UpdateUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.UpdateUserByID")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.UpdateUserByID with params: %#v", *m.UpdateUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateUserByID != nil && afterUpdateUserByIDCounter < 1 {
		m.t.Error("Expected call to UserRepositoryMock.UpdateUserByID")
	}

	if !m.UpdateUserByIDMock.invocationsDone() && afterUpdateUserByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.UpdateUserByID but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateUserByIDMock.expectedInvocations), afterUpdateUserByIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateUserInspect()

			m.MinimockDeleteUserByIDInspect()

			m.MinimockGetUserByIDInspect()

			m.MinimockUpdateUserByIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateUserDone() &&
		m.MinimockDeleteUserByIDDone() &&
		m.MinimockGetUserByIDDone() &&
		m.MinimockUpdateUserByIDDone()
}
