// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/BelyaevEI/microservices_auth/internal/service.UserService -o user_service_minimock.go -n UserServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/BelyaevEI/microservices_auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// UserServiceMock implements service.UserService
type UserServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateUser          func(ctx context.Context, userCreate *model.UserCreate) (i1 int64, err error)
	inspectFuncCreateUser   func(ctx context.Context, userCreate *model.UserCreate)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mUserServiceMockCreateUser

	funcDeleteUserByID          func(ctx context.Context, id int64) (err error)
	inspectFuncDeleteUserByID   func(ctx context.Context, id int64)
	afterDeleteUserByIDCounter  uint64
	beforeDeleteUserByIDCounter uint64
	DeleteUserByIDMock          mUserServiceMockDeleteUserByID

	funcGetUserByID          func(ctx context.Context, id int64) (up1 *model.User, err error)
	inspectFuncGetUserByID   func(ctx context.Context, id int64)
	afterGetUserByIDCounter  uint64
	beforeGetUserByIDCounter uint64
	GetUserByIDMock          mUserServiceMockGetUserByID

	funcUpdateUserByID          func(ctx context.Context, id int64, userUpdate *model.UserUpdate) (err error)
	inspectFuncUpdateUserByID   func(ctx context.Context, id int64, userUpdate *model.UserUpdate)
	afterUpdateUserByIDCounter  uint64
	beforeUpdateUserByIDCounter uint64
	UpdateUserByIDMock          mUserServiceMockUpdateUserByID
}

// NewUserServiceMock returns a mock for service.UserService
func NewUserServiceMock(t minimock.Tester) *UserServiceMock {
	m := &UserServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateUserMock = mUserServiceMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*UserServiceMockCreateUserParams{}

	m.DeleteUserByIDMock = mUserServiceMockDeleteUserByID{mock: m}
	m.DeleteUserByIDMock.callArgs = []*UserServiceMockDeleteUserByIDParams{}

	m.GetUserByIDMock = mUserServiceMockGetUserByID{mock: m}
	m.GetUserByIDMock.callArgs = []*UserServiceMockGetUserByIDParams{}

	m.UpdateUserByIDMock = mUserServiceMockUpdateUserByID{mock: m}
	m.UpdateUserByIDMock.callArgs = []*UserServiceMockUpdateUserByIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserServiceMockCreateUser struct {
	optional           bool
	mock               *UserServiceMock
	defaultExpectation *UserServiceMockCreateUserExpectation
	expectations       []*UserServiceMockCreateUserExpectation

	callArgs []*UserServiceMockCreateUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserServiceMockCreateUserExpectation specifies expectation struct of the UserService.CreateUser
type UserServiceMockCreateUserExpectation struct {
	mock      *UserServiceMock
	params    *UserServiceMockCreateUserParams
	paramPtrs *UserServiceMockCreateUserParamPtrs
	results   *UserServiceMockCreateUserResults
	Counter   uint64
}

// UserServiceMockCreateUserParams contains parameters of the UserService.CreateUser
type UserServiceMockCreateUserParams struct {
	ctx        context.Context
	userCreate *model.UserCreate
}

// UserServiceMockCreateUserParamPtrs contains pointers to parameters of the UserService.CreateUser
type UserServiceMockCreateUserParamPtrs struct {
	ctx        *context.Context
	userCreate **model.UserCreate
}

// UserServiceMockCreateUserResults contains results of the UserService.CreateUser
type UserServiceMockCreateUserResults struct {
	i1  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateUser *mUserServiceMockCreateUser) Optional() *mUserServiceMockCreateUser {
	mmCreateUser.optional = true
	return mmCreateUser
}

// Expect sets up expected params for UserService.CreateUser
func (mmCreateUser *mUserServiceMockCreateUser) Expect(ctx context.Context, userCreate *model.UserCreate) *mUserServiceMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserServiceMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserServiceMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.paramPtrs != nil {
		mmCreateUser.mock.t.Fatalf("UserServiceMock.CreateUser mock is already set by ExpectParams functions")
	}

	mmCreateUser.defaultExpectation.params = &UserServiceMockCreateUserParams{ctx, userCreate}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// ExpectCtxParam1 sets up expected param ctx for UserService.CreateUser
func (mmCreateUser *mUserServiceMockCreateUser) ExpectCtxParam1(ctx context.Context) *mUserServiceMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserServiceMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserServiceMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserServiceMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserServiceMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateUser
}

// ExpectUserCreateParam2 sets up expected param userCreate for UserService.CreateUser
func (mmCreateUser *mUserServiceMockCreateUser) ExpectUserCreateParam2(userCreate *model.UserCreate) *mUserServiceMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserServiceMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserServiceMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserServiceMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserServiceMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.userCreate = &userCreate

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the UserService.CreateUser
func (mmCreateUser *mUserServiceMockCreateUser) Inspect(f func(ctx context.Context, userCreate *model.UserCreate)) *mUserServiceMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for UserServiceMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by UserService.CreateUser
func (mmCreateUser *mUserServiceMockCreateUser) Return(i1 int64, err error) *UserServiceMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserServiceMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserServiceMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &UserServiceMockCreateUserResults{i1, err}
	return mmCreateUser.mock
}

// Set uses given function f to mock the UserService.CreateUser method
func (mmCreateUser *mUserServiceMockCreateUser) Set(f func(ctx context.Context, userCreate *model.UserCreate) (i1 int64, err error)) *UserServiceMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the UserService.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the UserService.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the UserService.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mUserServiceMockCreateUser) When(ctx context.Context, userCreate *model.UserCreate) *UserServiceMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserServiceMock.CreateUser mock is already set by Set")
	}

	expectation := &UserServiceMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &UserServiceMockCreateUserParams{ctx, userCreate},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up UserService.CreateUser return parameters for the expectation previously defined by the When method
func (e *UserServiceMockCreateUserExpectation) Then(i1 int64, err error) *UserServiceMock {
	e.results = &UserServiceMockCreateUserResults{i1, err}
	return e.mock
}

// Times sets number of times UserService.CreateUser should be invoked
func (mmCreateUser *mUserServiceMockCreateUser) Times(n uint64) *mUserServiceMockCreateUser {
	if n == 0 {
		mmCreateUser.mock.t.Fatalf("Times of UserServiceMock.CreateUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateUser.expectedInvocations, n)
	return mmCreateUser
}

func (mmCreateUser *mUserServiceMockCreateUser) invocationsDone() bool {
	if len(mmCreateUser.expectations) == 0 && mmCreateUser.defaultExpectation == nil && mmCreateUser.mock.funcCreateUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateUser.mock.afterCreateUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateUser implements service.UserService
func (mmCreateUser *UserServiceMock) CreateUser(ctx context.Context, userCreate *model.UserCreate) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, userCreate)
	}

	mm_params := UserServiceMockCreateUserParams{ctx, userCreate}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, &mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_want_ptrs := mmCreateUser.CreateUserMock.defaultExpectation.paramPtrs

		mm_got := UserServiceMockCreateUserParams{ctx, userCreate}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateUser.t.Errorf("UserServiceMock.CreateUser got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userCreate != nil && !minimock.Equal(*mm_want_ptrs.userCreate, mm_got.userCreate) {
				mmCreateUser.t.Errorf("UserServiceMock.CreateUser got unexpected parameter userCreate, want: %#v, got: %#v%s\n", *mm_want_ptrs.userCreate, mm_got.userCreate, minimock.Diff(*mm_want_ptrs.userCreate, mm_got.userCreate))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("UserServiceMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the UserServiceMock.CreateUser")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, userCreate)
	}
	mmCreateUser.t.Fatalf("Unexpected call to UserServiceMock.CreateUser. %v %v", ctx, userCreate)
	return
}

// CreateUserAfterCounter returns a count of finished UserServiceMock.CreateUser invocations
func (mmCreateUser *UserServiceMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of UserServiceMock.CreateUser invocations
func (mmCreateUser *UserServiceMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to UserServiceMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mUserServiceMockCreateUser) Calls() []*UserServiceMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*UserServiceMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *UserServiceMock) MinimockCreateUserDone() bool {
	if m.CreateUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateUserMock.invocationsDone()
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *UserServiceMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceMock.CreateUser with params: %#v", *e.params)
		}
	}

	afterCreateUserCounter := mm_atomic.LoadUint64(&m.afterCreateUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && afterCreateUserCounter < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to UserServiceMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && afterCreateUserCounter < 1 {
		m.t.Error("Expected call to UserServiceMock.CreateUser")
	}

	if !m.CreateUserMock.invocationsDone() && afterCreateUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserServiceMock.CreateUser but found %d calls",
			mm_atomic.LoadUint64(&m.CreateUserMock.expectedInvocations), afterCreateUserCounter)
	}
}

type mUserServiceMockDeleteUserByID struct {
	optional           bool
	mock               *UserServiceMock
	defaultExpectation *UserServiceMockDeleteUserByIDExpectation
	expectations       []*UserServiceMockDeleteUserByIDExpectation

	callArgs []*UserServiceMockDeleteUserByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserServiceMockDeleteUserByIDExpectation specifies expectation struct of the UserService.DeleteUserByID
type UserServiceMockDeleteUserByIDExpectation struct {
	mock      *UserServiceMock
	params    *UserServiceMockDeleteUserByIDParams
	paramPtrs *UserServiceMockDeleteUserByIDParamPtrs
	results   *UserServiceMockDeleteUserByIDResults
	Counter   uint64
}

// UserServiceMockDeleteUserByIDParams contains parameters of the UserService.DeleteUserByID
type UserServiceMockDeleteUserByIDParams struct {
	ctx context.Context
	id  int64
}

// UserServiceMockDeleteUserByIDParamPtrs contains pointers to parameters of the UserService.DeleteUserByID
type UserServiceMockDeleteUserByIDParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// UserServiceMockDeleteUserByIDResults contains results of the UserService.DeleteUserByID
type UserServiceMockDeleteUserByIDResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) Optional() *mUserServiceMockDeleteUserByID {
	mmDeleteUserByID.optional = true
	return mmDeleteUserByID
}

// Expect sets up expected params for UserService.DeleteUserByID
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) Expect(ctx context.Context, id int64) *mUserServiceMockDeleteUserByID {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserServiceMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserServiceMockDeleteUserByIDExpectation{}
	}

	if mmDeleteUserByID.defaultExpectation.paramPtrs != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserServiceMock.DeleteUserByID mock is already set by ExpectParams functions")
	}

	mmDeleteUserByID.defaultExpectation.params = &UserServiceMockDeleteUserByIDParams{ctx, id}
	for _, e := range mmDeleteUserByID.expectations {
		if minimock.Equal(e.params, mmDeleteUserByID.defaultExpectation.params) {
			mmDeleteUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteUserByID.defaultExpectation.params)
		}
	}

	return mmDeleteUserByID
}

// ExpectCtxParam1 sets up expected param ctx for UserService.DeleteUserByID
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) ExpectCtxParam1(ctx context.Context) *mUserServiceMockDeleteUserByID {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserServiceMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserServiceMockDeleteUserByIDExpectation{}
	}

	if mmDeleteUserByID.defaultExpectation.params != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserServiceMock.DeleteUserByID mock is already set by Expect")
	}

	if mmDeleteUserByID.defaultExpectation.paramPtrs == nil {
		mmDeleteUserByID.defaultExpectation.paramPtrs = &UserServiceMockDeleteUserByIDParamPtrs{}
	}
	mmDeleteUserByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteUserByID
}

// ExpectIdParam2 sets up expected param id for UserService.DeleteUserByID
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) ExpectIdParam2(id int64) *mUserServiceMockDeleteUserByID {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserServiceMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserServiceMockDeleteUserByIDExpectation{}
	}

	if mmDeleteUserByID.defaultExpectation.params != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserServiceMock.DeleteUserByID mock is already set by Expect")
	}

	if mmDeleteUserByID.defaultExpectation.paramPtrs == nil {
		mmDeleteUserByID.defaultExpectation.paramPtrs = &UserServiceMockDeleteUserByIDParamPtrs{}
	}
	mmDeleteUserByID.defaultExpectation.paramPtrs.id = &id

	return mmDeleteUserByID
}

// Inspect accepts an inspector function that has same arguments as the UserService.DeleteUserByID
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) Inspect(f func(ctx context.Context, id int64)) *mUserServiceMockDeleteUserByID {
	if mmDeleteUserByID.mock.inspectFuncDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("Inspect function is already set for UserServiceMock.DeleteUserByID")
	}

	mmDeleteUserByID.mock.inspectFuncDeleteUserByID = f

	return mmDeleteUserByID
}

// Return sets up results that will be returned by UserService.DeleteUserByID
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) Return(err error) *UserServiceMock {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserServiceMock.DeleteUserByID mock is already set by Set")
	}

	if mmDeleteUserByID.defaultExpectation == nil {
		mmDeleteUserByID.defaultExpectation = &UserServiceMockDeleteUserByIDExpectation{mock: mmDeleteUserByID.mock}
	}
	mmDeleteUserByID.defaultExpectation.results = &UserServiceMockDeleteUserByIDResults{err}
	return mmDeleteUserByID.mock
}

// Set uses given function f to mock the UserService.DeleteUserByID method
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) Set(f func(ctx context.Context, id int64) (err error)) *UserServiceMock {
	if mmDeleteUserByID.defaultExpectation != nil {
		mmDeleteUserByID.mock.t.Fatalf("Default expectation is already set for the UserService.DeleteUserByID method")
	}

	if len(mmDeleteUserByID.expectations) > 0 {
		mmDeleteUserByID.mock.t.Fatalf("Some expectations are already set for the UserService.DeleteUserByID method")
	}

	mmDeleteUserByID.mock.funcDeleteUserByID = f
	return mmDeleteUserByID.mock
}

// When sets expectation for the UserService.DeleteUserByID which will trigger the result defined by the following
// Then helper
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) When(ctx context.Context, id int64) *UserServiceMockDeleteUserByIDExpectation {
	if mmDeleteUserByID.mock.funcDeleteUserByID != nil {
		mmDeleteUserByID.mock.t.Fatalf("UserServiceMock.DeleteUserByID mock is already set by Set")
	}

	expectation := &UserServiceMockDeleteUserByIDExpectation{
		mock:   mmDeleteUserByID.mock,
		params: &UserServiceMockDeleteUserByIDParams{ctx, id},
	}
	mmDeleteUserByID.expectations = append(mmDeleteUserByID.expectations, expectation)
	return expectation
}

// Then sets up UserService.DeleteUserByID return parameters for the expectation previously defined by the When method
func (e *UserServiceMockDeleteUserByIDExpectation) Then(err error) *UserServiceMock {
	e.results = &UserServiceMockDeleteUserByIDResults{err}
	return e.mock
}

// Times sets number of times UserService.DeleteUserByID should be invoked
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) Times(n uint64) *mUserServiceMockDeleteUserByID {
	if n == 0 {
		mmDeleteUserByID.mock.t.Fatalf("Times of UserServiceMock.DeleteUserByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteUserByID.expectedInvocations, n)
	return mmDeleteUserByID
}

func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) invocationsDone() bool {
	if len(mmDeleteUserByID.expectations) == 0 && mmDeleteUserByID.defaultExpectation == nil && mmDeleteUserByID.mock.funcDeleteUserByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteUserByID.mock.afterDeleteUserByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteUserByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteUserByID implements service.UserService
func (mmDeleteUserByID *UserServiceMock) DeleteUserByID(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteUserByID.beforeDeleteUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteUserByID.afterDeleteUserByIDCounter, 1)

	if mmDeleteUserByID.inspectFuncDeleteUserByID != nil {
		mmDeleteUserByID.inspectFuncDeleteUserByID(ctx, id)
	}

	mm_params := UserServiceMockDeleteUserByIDParams{ctx, id}

	// Record call args
	mmDeleteUserByID.DeleteUserByIDMock.mutex.Lock()
	mmDeleteUserByID.DeleteUserByIDMock.callArgs = append(mmDeleteUserByID.DeleteUserByIDMock.callArgs, &mm_params)
	mmDeleteUserByID.DeleteUserByIDMock.mutex.Unlock()

	for _, e := range mmDeleteUserByID.DeleteUserByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.paramPtrs

		mm_got := UserServiceMockDeleteUserByIDParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteUserByID.t.Errorf("UserServiceMock.DeleteUserByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDeleteUserByID.t.Errorf("UserServiceMock.DeleteUserByID got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteUserByID.t.Errorf("UserServiceMock.DeleteUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteUserByID.DeleteUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteUserByID.t.Fatal("No results are set for the UserServiceMock.DeleteUserByID")
		}
		return (*mm_results).err
	}
	if mmDeleteUserByID.funcDeleteUserByID != nil {
		return mmDeleteUserByID.funcDeleteUserByID(ctx, id)
	}
	mmDeleteUserByID.t.Fatalf("Unexpected call to UserServiceMock.DeleteUserByID. %v %v", ctx, id)
	return
}

// DeleteUserByIDAfterCounter returns a count of finished UserServiceMock.DeleteUserByID invocations
func (mmDeleteUserByID *UserServiceMock) DeleteUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUserByID.afterDeleteUserByIDCounter)
}

// DeleteUserByIDBeforeCounter returns a count of UserServiceMock.DeleteUserByID invocations
func (mmDeleteUserByID *UserServiceMock) DeleteUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUserByID.beforeDeleteUserByIDCounter)
}

// Calls returns a list of arguments used in each call to UserServiceMock.DeleteUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteUserByID *mUserServiceMockDeleteUserByID) Calls() []*UserServiceMockDeleteUserByIDParams {
	mmDeleteUserByID.mutex.RLock()

	argCopy := make([]*UserServiceMockDeleteUserByIDParams, len(mmDeleteUserByID.callArgs))
	copy(argCopy, mmDeleteUserByID.callArgs)

	mmDeleteUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteUserByIDDone returns true if the count of the DeleteUserByID invocations corresponds
// the number of defined expectations
func (m *UserServiceMock) MinimockDeleteUserByIDDone() bool {
	if m.DeleteUserByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteUserByIDMock.invocationsDone()
}

// MinimockDeleteUserByIDInspect logs each unmet expectation
func (m *UserServiceMock) MinimockDeleteUserByIDInspect() {
	for _, e := range m.DeleteUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceMock.DeleteUserByID with params: %#v", *e.params)
		}
	}

	afterDeleteUserByIDCounter := mm_atomic.LoadUint64(&m.afterDeleteUserByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteUserByIDMock.defaultExpectation != nil && afterDeleteUserByIDCounter < 1 {
		if m.DeleteUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceMock.DeleteUserByID")
		} else {
			m.t.Errorf("Expected call to UserServiceMock.DeleteUserByID with params: %#v", *m.DeleteUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteUserByID != nil && afterDeleteUserByIDCounter < 1 {
		m.t.Error("Expected call to UserServiceMock.DeleteUserByID")
	}

	if !m.DeleteUserByIDMock.invocationsDone() && afterDeleteUserByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserServiceMock.DeleteUserByID but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteUserByIDMock.expectedInvocations), afterDeleteUserByIDCounter)
	}
}

type mUserServiceMockGetUserByID struct {
	optional           bool
	mock               *UserServiceMock
	defaultExpectation *UserServiceMockGetUserByIDExpectation
	expectations       []*UserServiceMockGetUserByIDExpectation

	callArgs []*UserServiceMockGetUserByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserServiceMockGetUserByIDExpectation specifies expectation struct of the UserService.GetUserByID
type UserServiceMockGetUserByIDExpectation struct {
	mock      *UserServiceMock
	params    *UserServiceMockGetUserByIDParams
	paramPtrs *UserServiceMockGetUserByIDParamPtrs
	results   *UserServiceMockGetUserByIDResults
	Counter   uint64
}

// UserServiceMockGetUserByIDParams contains parameters of the UserService.GetUserByID
type UserServiceMockGetUserByIDParams struct {
	ctx context.Context
	id  int64
}

// UserServiceMockGetUserByIDParamPtrs contains pointers to parameters of the UserService.GetUserByID
type UserServiceMockGetUserByIDParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// UserServiceMockGetUserByIDResults contains results of the UserService.GetUserByID
type UserServiceMockGetUserByIDResults struct {
	up1 *model.User
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUserByID *mUserServiceMockGetUserByID) Optional() *mUserServiceMockGetUserByID {
	mmGetUserByID.optional = true
	return mmGetUserByID
}

// Expect sets up expected params for UserService.GetUserByID
func (mmGetUserByID *mUserServiceMockGetUserByID) Expect(ctx context.Context, id int64) *mUserServiceMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserServiceMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserServiceMockGetUserByIDExpectation{}
	}

	if mmGetUserByID.defaultExpectation.paramPtrs != nil {
		mmGetUserByID.mock.t.Fatalf("UserServiceMock.GetUserByID mock is already set by ExpectParams functions")
	}

	mmGetUserByID.defaultExpectation.params = &UserServiceMockGetUserByIDParams{ctx, id}
	for _, e := range mmGetUserByID.expectations {
		if minimock.Equal(e.params, mmGetUserByID.defaultExpectation.params) {
			mmGetUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByID.defaultExpectation.params)
		}
	}

	return mmGetUserByID
}

// ExpectCtxParam1 sets up expected param ctx for UserService.GetUserByID
func (mmGetUserByID *mUserServiceMockGetUserByID) ExpectCtxParam1(ctx context.Context) *mUserServiceMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserServiceMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserServiceMockGetUserByIDExpectation{}
	}

	if mmGetUserByID.defaultExpectation.params != nil {
		mmGetUserByID.mock.t.Fatalf("UserServiceMock.GetUserByID mock is already set by Expect")
	}

	if mmGetUserByID.defaultExpectation.paramPtrs == nil {
		mmGetUserByID.defaultExpectation.paramPtrs = &UserServiceMockGetUserByIDParamPtrs{}
	}
	mmGetUserByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetUserByID
}

// ExpectIdParam2 sets up expected param id for UserService.GetUserByID
func (mmGetUserByID *mUserServiceMockGetUserByID) ExpectIdParam2(id int64) *mUserServiceMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserServiceMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserServiceMockGetUserByIDExpectation{}
	}

	if mmGetUserByID.defaultExpectation.params != nil {
		mmGetUserByID.mock.t.Fatalf("UserServiceMock.GetUserByID mock is already set by Expect")
	}

	if mmGetUserByID.defaultExpectation.paramPtrs == nil {
		mmGetUserByID.defaultExpectation.paramPtrs = &UserServiceMockGetUserByIDParamPtrs{}
	}
	mmGetUserByID.defaultExpectation.paramPtrs.id = &id

	return mmGetUserByID
}

// Inspect accepts an inspector function that has same arguments as the UserService.GetUserByID
func (mmGetUserByID *mUserServiceMockGetUserByID) Inspect(f func(ctx context.Context, id int64)) *mUserServiceMockGetUserByID {
	if mmGetUserByID.mock.inspectFuncGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("Inspect function is already set for UserServiceMock.GetUserByID")
	}

	mmGetUserByID.mock.inspectFuncGetUserByID = f

	return mmGetUserByID
}

// Return sets up results that will be returned by UserService.GetUserByID
func (mmGetUserByID *mUserServiceMockGetUserByID) Return(up1 *model.User, err error) *UserServiceMock {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserServiceMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &UserServiceMockGetUserByIDExpectation{mock: mmGetUserByID.mock}
	}
	mmGetUserByID.defaultExpectation.results = &UserServiceMockGetUserByIDResults{up1, err}
	return mmGetUserByID.mock
}

// Set uses given function f to mock the UserService.GetUserByID method
func (mmGetUserByID *mUserServiceMockGetUserByID) Set(f func(ctx context.Context, id int64) (up1 *model.User, err error)) *UserServiceMock {
	if mmGetUserByID.defaultExpectation != nil {
		mmGetUserByID.mock.t.Fatalf("Default expectation is already set for the UserService.GetUserByID method")
	}

	if len(mmGetUserByID.expectations) > 0 {
		mmGetUserByID.mock.t.Fatalf("Some expectations are already set for the UserService.GetUserByID method")
	}

	mmGetUserByID.mock.funcGetUserByID = f
	return mmGetUserByID.mock
}

// When sets expectation for the UserService.GetUserByID which will trigger the result defined by the following
// Then helper
func (mmGetUserByID *mUserServiceMockGetUserByID) When(ctx context.Context, id int64) *UserServiceMockGetUserByIDExpectation {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("UserServiceMock.GetUserByID mock is already set by Set")
	}

	expectation := &UserServiceMockGetUserByIDExpectation{
		mock:   mmGetUserByID.mock,
		params: &UserServiceMockGetUserByIDParams{ctx, id},
	}
	mmGetUserByID.expectations = append(mmGetUserByID.expectations, expectation)
	return expectation
}

// Then sets up UserService.GetUserByID return parameters for the expectation previously defined by the When method
func (e *UserServiceMockGetUserByIDExpectation) Then(up1 *model.User, err error) *UserServiceMock {
	e.results = &UserServiceMockGetUserByIDResults{up1, err}
	return e.mock
}

// Times sets number of times UserService.GetUserByID should be invoked
func (mmGetUserByID *mUserServiceMockGetUserByID) Times(n uint64) *mUserServiceMockGetUserByID {
	if n == 0 {
		mmGetUserByID.mock.t.Fatalf("Times of UserServiceMock.GetUserByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUserByID.expectedInvocations, n)
	return mmGetUserByID
}

func (mmGetUserByID *mUserServiceMockGetUserByID) invocationsDone() bool {
	if len(mmGetUserByID.expectations) == 0 && mmGetUserByID.defaultExpectation == nil && mmGetUserByID.mock.funcGetUserByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUserByID.mock.afterGetUserByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUserByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUserByID implements service.UserService
func (mmGetUserByID *UserServiceMock) GetUserByID(ctx context.Context, id int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGetUserByID.beforeGetUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByID.afterGetUserByIDCounter, 1)

	if mmGetUserByID.inspectFuncGetUserByID != nil {
		mmGetUserByID.inspectFuncGetUserByID(ctx, id)
	}

	mm_params := UserServiceMockGetUserByIDParams{ctx, id}

	// Record call args
	mmGetUserByID.GetUserByIDMock.mutex.Lock()
	mmGetUserByID.GetUserByIDMock.callArgs = append(mmGetUserByID.GetUserByIDMock.callArgs, &mm_params)
	mmGetUserByID.GetUserByIDMock.mutex.Unlock()

	for _, e := range mmGetUserByID.GetUserByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUserByID.GetUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByID.GetUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByID.GetUserByIDMock.defaultExpectation.params
		mm_want_ptrs := mmGetUserByID.GetUserByIDMock.defaultExpectation.paramPtrs

		mm_got := UserServiceMockGetUserByIDParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUserByID.t.Errorf("UserServiceMock.GetUserByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGetUserByID.t.Errorf("UserServiceMock.GetUserByID got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByID.t.Errorf("UserServiceMock.GetUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByID.GetUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByID.t.Fatal("No results are set for the UserServiceMock.GetUserByID")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUserByID.funcGetUserByID != nil {
		return mmGetUserByID.funcGetUserByID(ctx, id)
	}
	mmGetUserByID.t.Fatalf("Unexpected call to UserServiceMock.GetUserByID. %v %v", ctx, id)
	return
}

// GetUserByIDAfterCounter returns a count of finished UserServiceMock.GetUserByID invocations
func (mmGetUserByID *UserServiceMock) GetUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.afterGetUserByIDCounter)
}

// GetUserByIDBeforeCounter returns a count of UserServiceMock.GetUserByID invocations
func (mmGetUserByID *UserServiceMock) GetUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.beforeGetUserByIDCounter)
}

// Calls returns a list of arguments used in each call to UserServiceMock.GetUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByID *mUserServiceMockGetUserByID) Calls() []*UserServiceMockGetUserByIDParams {
	mmGetUserByID.mutex.RLock()

	argCopy := make([]*UserServiceMockGetUserByIDParams, len(mmGetUserByID.callArgs))
	copy(argCopy, mmGetUserByID.callArgs)

	mmGetUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByIDDone returns true if the count of the GetUserByID invocations corresponds
// the number of defined expectations
func (m *UserServiceMock) MinimockGetUserByIDDone() bool {
	if m.GetUserByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserByIDMock.invocationsDone()
}

// MinimockGetUserByIDInspect logs each unmet expectation
func (m *UserServiceMock) MinimockGetUserByIDInspect() {
	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceMock.GetUserByID with params: %#v", *e.params)
		}
	}

	afterGetUserByIDCounter := mm_atomic.LoadUint64(&m.afterGetUserByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByIDMock.defaultExpectation != nil && afterGetUserByIDCounter < 1 {
		if m.GetUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceMock.GetUserByID")
		} else {
			m.t.Errorf("Expected call to UserServiceMock.GetUserByID with params: %#v", *m.GetUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByID != nil && afterGetUserByIDCounter < 1 {
		m.t.Error("Expected call to UserServiceMock.GetUserByID")
	}

	if !m.GetUserByIDMock.invocationsDone() && afterGetUserByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserServiceMock.GetUserByID but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserByIDMock.expectedInvocations), afterGetUserByIDCounter)
	}
}

type mUserServiceMockUpdateUserByID struct {
	optional           bool
	mock               *UserServiceMock
	defaultExpectation *UserServiceMockUpdateUserByIDExpectation
	expectations       []*UserServiceMockUpdateUserByIDExpectation

	callArgs []*UserServiceMockUpdateUserByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserServiceMockUpdateUserByIDExpectation specifies expectation struct of the UserService.UpdateUserByID
type UserServiceMockUpdateUserByIDExpectation struct {
	mock      *UserServiceMock
	params    *UserServiceMockUpdateUserByIDParams
	paramPtrs *UserServiceMockUpdateUserByIDParamPtrs
	results   *UserServiceMockUpdateUserByIDResults
	Counter   uint64
}

// UserServiceMockUpdateUserByIDParams contains parameters of the UserService.UpdateUserByID
type UserServiceMockUpdateUserByIDParams struct {
	ctx        context.Context
	id         int64
	userUpdate *model.UserUpdate
}

// UserServiceMockUpdateUserByIDParamPtrs contains pointers to parameters of the UserService.UpdateUserByID
type UserServiceMockUpdateUserByIDParamPtrs struct {
	ctx        *context.Context
	id         *int64
	userUpdate **model.UserUpdate
}

// UserServiceMockUpdateUserByIDResults contains results of the UserService.UpdateUserByID
type UserServiceMockUpdateUserByIDResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) Optional() *mUserServiceMockUpdateUserByID {
	mmUpdateUserByID.optional = true
	return mmUpdateUserByID
}

// Expect sets up expected params for UserService.UpdateUserByID
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) Expect(ctx context.Context, id int64, userUpdate *model.UserUpdate) *mUserServiceMockUpdateUserByID {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserServiceMockUpdateUserByIDExpectation{}
	}

	if mmUpdateUserByID.defaultExpectation.paramPtrs != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by ExpectParams functions")
	}

	mmUpdateUserByID.defaultExpectation.params = &UserServiceMockUpdateUserByIDParams{ctx, id, userUpdate}
	for _, e := range mmUpdateUserByID.expectations {
		if minimock.Equal(e.params, mmUpdateUserByID.defaultExpectation.params) {
			mmUpdateUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateUserByID.defaultExpectation.params)
		}
	}

	return mmUpdateUserByID
}

// ExpectCtxParam1 sets up expected param ctx for UserService.UpdateUserByID
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) ExpectCtxParam1(ctx context.Context) *mUserServiceMockUpdateUserByID {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserServiceMockUpdateUserByIDExpectation{}
	}

	if mmUpdateUserByID.defaultExpectation.params != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by Expect")
	}

	if mmUpdateUserByID.defaultExpectation.paramPtrs == nil {
		mmUpdateUserByID.defaultExpectation.paramPtrs = &UserServiceMockUpdateUserByIDParamPtrs{}
	}
	mmUpdateUserByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmUpdateUserByID
}

// ExpectIdParam2 sets up expected param id for UserService.UpdateUserByID
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) ExpectIdParam2(id int64) *mUserServiceMockUpdateUserByID {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserServiceMockUpdateUserByIDExpectation{}
	}

	if mmUpdateUserByID.defaultExpectation.params != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by Expect")
	}

	if mmUpdateUserByID.defaultExpectation.paramPtrs == nil {
		mmUpdateUserByID.defaultExpectation.paramPtrs = &UserServiceMockUpdateUserByIDParamPtrs{}
	}
	mmUpdateUserByID.defaultExpectation.paramPtrs.id = &id

	return mmUpdateUserByID
}

// ExpectUserUpdateParam3 sets up expected param userUpdate for UserService.UpdateUserByID
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) ExpectUserUpdateParam3(userUpdate *model.UserUpdate) *mUserServiceMockUpdateUserByID {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserServiceMockUpdateUserByIDExpectation{}
	}

	if mmUpdateUserByID.defaultExpectation.params != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by Expect")
	}

	if mmUpdateUserByID.defaultExpectation.paramPtrs == nil {
		mmUpdateUserByID.defaultExpectation.paramPtrs = &UserServiceMockUpdateUserByIDParamPtrs{}
	}
	mmUpdateUserByID.defaultExpectation.paramPtrs.userUpdate = &userUpdate

	return mmUpdateUserByID
}

// Inspect accepts an inspector function that has same arguments as the UserService.UpdateUserByID
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) Inspect(f func(ctx context.Context, id int64, userUpdate *model.UserUpdate)) *mUserServiceMockUpdateUserByID {
	if mmUpdateUserByID.mock.inspectFuncUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("Inspect function is already set for UserServiceMock.UpdateUserByID")
	}

	mmUpdateUserByID.mock.inspectFuncUpdateUserByID = f

	return mmUpdateUserByID
}

// Return sets up results that will be returned by UserService.UpdateUserByID
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) Return(err error) *UserServiceMock {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by Set")
	}

	if mmUpdateUserByID.defaultExpectation == nil {
		mmUpdateUserByID.defaultExpectation = &UserServiceMockUpdateUserByIDExpectation{mock: mmUpdateUserByID.mock}
	}
	mmUpdateUserByID.defaultExpectation.results = &UserServiceMockUpdateUserByIDResults{err}
	return mmUpdateUserByID.mock
}

// Set uses given function f to mock the UserService.UpdateUserByID method
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) Set(f func(ctx context.Context, id int64, userUpdate *model.UserUpdate) (err error)) *UserServiceMock {
	if mmUpdateUserByID.defaultExpectation != nil {
		mmUpdateUserByID.mock.t.Fatalf("Default expectation is already set for the UserService.UpdateUserByID method")
	}

	if len(mmUpdateUserByID.expectations) > 0 {
		mmUpdateUserByID.mock.t.Fatalf("Some expectations are already set for the UserService.UpdateUserByID method")
	}

	mmUpdateUserByID.mock.funcUpdateUserByID = f
	return mmUpdateUserByID.mock
}

// When sets expectation for the UserService.UpdateUserByID which will trigger the result defined by the following
// Then helper
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) When(ctx context.Context, id int64, userUpdate *model.UserUpdate) *UserServiceMockUpdateUserByIDExpectation {
	if mmUpdateUserByID.mock.funcUpdateUserByID != nil {
		mmUpdateUserByID.mock.t.Fatalf("UserServiceMock.UpdateUserByID mock is already set by Set")
	}

	expectation := &UserServiceMockUpdateUserByIDExpectation{
		mock:   mmUpdateUserByID.mock,
		params: &UserServiceMockUpdateUserByIDParams{ctx, id, userUpdate},
	}
	mmUpdateUserByID.expectations = append(mmUpdateUserByID.expectations, expectation)
	return expectation
}

// Then sets up UserService.UpdateUserByID return parameters for the expectation previously defined by the When method
func (e *UserServiceMockUpdateUserByIDExpectation) Then(err error) *UserServiceMock {
	e.results = &UserServiceMockUpdateUserByIDResults{err}
	return e.mock
}

// Times sets number of times UserService.UpdateUserByID should be invoked
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) Times(n uint64) *mUserServiceMockUpdateUserByID {
	if n == 0 {
		mmUpdateUserByID.mock.t.Fatalf("Times of UserServiceMock.UpdateUserByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateUserByID.expectedInvocations, n)
	return mmUpdateUserByID
}

func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) invocationsDone() bool {
	if len(mmUpdateUserByID.expectations) == 0 && mmUpdateUserByID.defaultExpectation == nil && mmUpdateUserByID.mock.funcUpdateUserByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateUserByID.mock.afterUpdateUserByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateUserByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateUserByID implements service.UserService
func (mmUpdateUserByID *UserServiceMock) UpdateUserByID(ctx context.Context, id int64, userUpdate *model.UserUpdate) (err error) {
	mm_atomic.AddUint64(&mmUpdateUserByID.beforeUpdateUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateUserByID.afterUpdateUserByIDCounter, 1)

	if mmUpdateUserByID.inspectFuncUpdateUserByID != nil {
		mmUpdateUserByID.inspectFuncUpdateUserByID(ctx, id, userUpdate)
	}

	mm_params := UserServiceMockUpdateUserByIDParams{ctx, id, userUpdate}

	// Record call args
	mmUpdateUserByID.UpdateUserByIDMock.mutex.Lock()
	mmUpdateUserByID.UpdateUserByIDMock.callArgs = append(mmUpdateUserByID.UpdateUserByIDMock.callArgs, &mm_params)
	mmUpdateUserByID.UpdateUserByIDMock.mutex.Unlock()

	for _, e := range mmUpdateUserByID.UpdateUserByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation.paramPtrs

		mm_got := UserServiceMockUpdateUserByIDParams{ctx, id, userUpdate}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateUserByID.t.Errorf("UserServiceMock.UpdateUserByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmUpdateUserByID.t.Errorf("UserServiceMock.UpdateUserByID got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

			if mm_want_ptrs.userUpdate != nil && !minimock.Equal(*mm_want_ptrs.userUpdate, mm_got.userUpdate) {
				mmUpdateUserByID.t.Errorf("UserServiceMock.UpdateUserByID got unexpected parameter userUpdate, want: %#v, got: %#v%s\n", *mm_want_ptrs.userUpdate, mm_got.userUpdate, minimock.Diff(*mm_want_ptrs.userUpdate, mm_got.userUpdate))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateUserByID.t.Errorf("UserServiceMock.UpdateUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateUserByID.UpdateUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateUserByID.t.Fatal("No results are set for the UserServiceMock.UpdateUserByID")
		}
		return (*mm_results).err
	}
	if mmUpdateUserByID.funcUpdateUserByID != nil {
		return mmUpdateUserByID.funcUpdateUserByID(ctx, id, userUpdate)
	}
	mmUpdateUserByID.t.Fatalf("Unexpected call to UserServiceMock.UpdateUserByID. %v %v %v", ctx, id, userUpdate)
	return
}

// UpdateUserByIDAfterCounter returns a count of finished UserServiceMock.UpdateUserByID invocations
func (mmUpdateUserByID *UserServiceMock) UpdateUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUserByID.afterUpdateUserByIDCounter)
}

// UpdateUserByIDBeforeCounter returns a count of UserServiceMock.UpdateUserByID invocations
func (mmUpdateUserByID *UserServiceMock) UpdateUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUserByID.beforeUpdateUserByIDCounter)
}

// Calls returns a list of arguments used in each call to UserServiceMock.UpdateUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateUserByID *mUserServiceMockUpdateUserByID) Calls() []*UserServiceMockUpdateUserByIDParams {
	mmUpdateUserByID.mutex.RLock()

	argCopy := make([]*UserServiceMockUpdateUserByIDParams, len(mmUpdateUserByID.callArgs))
	copy(argCopy, mmUpdateUserByID.callArgs)

	mmUpdateUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateUserByIDDone returns true if the count of the UpdateUserByID invocations corresponds
// the number of defined expectations
func (m *UserServiceMock) MinimockUpdateUserByIDDone() bool {
	if m.UpdateUserByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateUserByIDMock.invocationsDone()
}

// MinimockUpdateUserByIDInspect logs each unmet expectation
func (m *UserServiceMock) MinimockUpdateUserByIDInspect() {
	for _, e := range m.UpdateUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceMock.UpdateUserByID with params: %#v", *e.params)
		}
	}

	afterUpdateUserByIDCounter := mm_atomic.LoadUint64(&m.afterUpdateUserByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateUserByIDMock.defaultExpectation != nil && afterUpdateUserByIDCounter < 1 {
		if m.UpdateUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceMock.UpdateUserByID")
		} else {
			m.t.Errorf("Expected call to UserServiceMock.UpdateUserByID with params: %#v", *m.UpdateUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateUserByID != nil && afterUpdateUserByIDCounter < 1 {
		m.t.Error("Expected call to UserServiceMock.UpdateUserByID")
	}

	if !m.UpdateUserByIDMock.invocationsDone() && afterUpdateUserByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserServiceMock.UpdateUserByID but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateUserByIDMock.expectedInvocations), afterUpdateUserByIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateUserInspect()

			m.MinimockDeleteUserByIDInspect()

			m.MinimockGetUserByIDInspect()

			m.MinimockUpdateUserByIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateUserDone() &&
		m.MinimockDeleteUserByIDDone() &&
		m.MinimockGetUserByIDDone() &&
		m.MinimockUpdateUserByIDDone()
}
